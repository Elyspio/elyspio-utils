//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Elyspio.Utils.Telemetry.Examples.WebApi.ApiSante.Rest
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ApiSanteRestClient 
    {
        private string _baseUrl = "http://inte_service_spu.lyon-dev2.local/APISante.Rest.V1";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public ApiSanteRestClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permet de récupérer le contenu d'un fichier sans ses métadonnées
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="getContenuDocumentPayload">Paramètre de requete pour récupérer le contenu du document</param>
        /// <returns>Le contenu du document</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DocumentContenu> Documents_GetContenuDocumentAsync(string x_idTechPsConnecte = null, GetContenuDocumentPayload getContenuDocumentPayload = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/documents/contenu");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(getContenuDocumentPayload, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DocumentContenu>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupération des documents en vérifiant les droits de l'utilisateur idTechPs
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MultiDoc>> Documents_GetMultiDocCheckingRightsAsync(string idTechPSIdentifie, string x_idTechPsConnecte = null, string idLocalDoc = null, int? idEts = null, int? idPiece = null, System.Collections.Generic.IEnumerable<FormatDocEnum> listeFormats = null, ProcessPriorityClass? priorite = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/documents/multidocs?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPSIdentifie") + "=").Append(System.Uri.EscapeDataString(idTechPSIdentifie != null ? ConvertToString(idTechPSIdentifie, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            if (idLocalDoc != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idLocalDoc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idLocalDoc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idEts != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idEts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idEts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idPiece != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idPiece") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idPiece, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (listeFormats != null)
            {
                foreach (var item_ in listeFormats) { urlBuilder_.Append(System.Uri.EscapeDataString("listeFormats") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (priorite != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("priorite") + "=").Append(System.Uri.EscapeDataString(ConvertToString(priorite, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MultiDoc>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Ps non habilit\u00e9", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupération des métadonnées relative au document
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FullMetadataDoc> Documents_GetMetadataDocCheckingRightsAsync(string idTechPSIdentifie, string x_idTechPsConnecte = null, string idLocalDoc = null, int? idEts = null, int? idPiece = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/documents/metadata?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPSIdentifie") + "=").Append(System.Uri.EscapeDataString(idTechPSIdentifie != null ? ConvertToString(idTechPSIdentifie, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            if (idLocalDoc != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idLocalDoc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idLocalDoc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idEts != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idEts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idEts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idPiece != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idPiece") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idPiece, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FullMetadataDoc>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Ps non habilit\u00e9", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupération de l'info si le document est invalidable
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> Documents_IsDocumentInvalidableAsync(string idTechPs, string idLocalDoc, int idEts, decimal? idPiece, string idPsAuteur, string isPsExpediteur, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idEts == null)
                throw new System.ArgumentNullException("idEts");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/documents/isInvalidable?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPs") + "=").Append(System.Uri.EscapeDataString(idTechPs != null ? ConvertToString(idTechPs, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("idLocalDoc") + "=").Append(System.Uri.EscapeDataString(idLocalDoc != null ? ConvertToString(idLocalDoc, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("idEts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idEts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("idPiece") + "=").Append(System.Uri.EscapeDataString(idPiece != null ? ConvertToString(idPiece, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("idPsAuteur") + "=").Append(System.Uri.EscapeDataString(idPsAuteur != null ? ConvertToString(idPsAuteur, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("isPsExpediteur") + "=").Append(System.Uri.EscapeDataString(isPsExpediteur != null ? ConvertToString(isPsExpediteur, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Invalider un document
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Invalidation réussie</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Documents_InvaliderDocumentAsync(string idLocalDoc, int idEts, string commentaire, string idTechPsIdentifie, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idEts == null)
                throw new System.ArgumentNullException("idEts");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/documents/invalider?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idLocalDoc") + "=").Append(System.Uri.EscapeDataString(idLocalDoc != null ? ConvertToString(idLocalDoc, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("idEts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idEts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("commentaire") + "=").Append(System.Uri.EscapeDataString(commentaire != null ? ConvertToString(commentaire, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(idTechPsIdentifie != null ? ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Vérifie la validité du jeton du passe droit
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Jeton valide</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Documents_CheckTokenPasseDroitAsync(string tokenId, string x_idTechPsConnecte = null, string idLocalDoc = null, int? idEts = null, int? idPiece = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/documents/PasseDroit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("tokenId") + "=").Append(System.Uri.EscapeDataString(tokenId != null ? ConvertToString(tokenId, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            if (idLocalDoc != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idLocalDoc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idLocalDoc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idEts != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idEts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idEts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idPiece != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idPiece") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idPiece, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Jeton invalide", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Génère le document au format PDF PIVOT à partir de l'original, s'il n'existe pas dans l'entrepôt central.
        /// </summary>
        /// <param name="idLocalDoc">Identifiant local du document</param>
        /// <param name="domaineIdLocalDoc">Domaine d'identification du document (= idStic de l'établissement).</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="checkPdfPivotExistence">Booléen pour bloquer la génération du PDF pivot s'il existe déjà</param>
        /// <returns>PDF pivot généré</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Documents_GenererPdfPivotAsync(string idLocalDoc, int domaineIdLocalDoc, string x_idTechPsConnecte = null, bool? checkPdfPivotExistence = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (domaineIdLocalDoc == null)
                throw new System.ArgumentNullException("domaineIdLocalDoc");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/documents/pdfpivot?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idLocalDoc") + "=").Append(System.Uri.EscapeDataString(idLocalDoc != null ? ConvertToString(idLocalDoc, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("domaineIdLocalDoc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(domaineIdLocalDoc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (checkPdfPivotExistence != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("checkPdfPivotExistence") + "=").Append(System.Uri.EscapeDataString(ConvertToString(checkPdfPivotExistence, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// récupération de la visioconférence active associée à une conversation
        /// </summary>
        /// <param name="id">id de la visioconférence</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Visio> Conversations_GetActiveVisioAsync(decimal id, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/conversations/{id}/visio/active");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Visio>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupération de la liste des conversations avec ce patient et le Patient HIMSELF
        /// </summary>
        /// <param name="ippr">Identifiant du patient</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ConversationPatient>> Conversations_GetConversationsAsync(string ippr, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/conversations/patient/{ippr}/all");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ConversationPatient>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupération de la liste des échanges d'une conversation
        /// </summary>
        /// <param name="idConversation">Identifiant de la conversation</param>
        /// <param name="ippr">Identifiant du patient (utilisé dans la vérification des droits du patient)</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ConversationEchangesPatient> Conversations_GetConversationEchangesAsync(int idConversation, string ippr, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idConversation == null)
                throw new System.ArgumentNullException("idConversation");

            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/conversations/patient/{ippr}/{idConversation}");
            urlBuilder_.Replace("{idConversation}", System.Uri.EscapeDataString(ConvertToString(idConversation, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConversationEchangesPatient>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Création d'un échange avec un message et/ou des pièces jointes.
        /// </summary>
        /// <param name="idConversation">Identifiant de la conversation</param>
        /// <param name="ippr">Identifiant du patient</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="payload">Message + fichiers à envoyer</param>
        /// <returns>Fichiers enregistré avec succes</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> Conversations_AddEchangeInConversationAsync(int idConversation, string ippr, string x_idTechPsConnecte = null, AddEchangeInConversationPayload payload = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idConversation == null)
                throw new System.ArgumentNullException("idConversation");

            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/conversations/patient/{ippr}/{idConversation}");
            urlBuilder_.Replace("{idConversation}", System.Uri.EscapeDataString(ConvertToString(idConversation, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 415)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Le format du fichier n\'est pas support\u00e9", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur pendant l\'enregistrement du fichier", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Indique qu'une conversation a été lue par le patient
        /// </summary>
        /// <param name="idConversation">Identifiant de la conversation</param>
        /// <param name="ippr">Identifiant du patient (utilisé dans la vérification des droits du patient)</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>La conversation est a été lue par le patient</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Conversations_SetConversationLueAsync(int idConversation, string ippr, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idConversation == null)
                throw new System.ArgumentNullException("idConversation");

            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/conversations/patient/{ippr}/{idConversation}/lue");
            urlBuilder_.Replace("{idConversation}", System.Uri.EscapeDataString(ConvertToString(idConversation, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mets à jour la conversation
        /// </summary>
        /// <param name="idConversation">Identifiant de la conversation</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Mets à jour la conversation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Conversations_UpdateConversationUtilisateurAsync(int idConversation, string x_idTechPsConnecte = null, ConversationUtilisateurDto conversationUtilisateurDto = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idConversation == null)
                throw new System.ArgumentNullException("idConversation");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/conversations/{idConversation}");
            urlBuilder_.Replace("{idConversation}", System.Uri.EscapeDataString(ConvertToString(idConversation, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(conversationUtilisateurDto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="ippr">Identifiant du patient (utilisé dans le filtre VerifyPatientInConversation)</param>
        /// <param name="idConversation">Identifiant de la conversation (utilisé dans le filtre VerifyPatientInConversation)</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Les documents demandés</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MultiDoc>> Conversations_GetDocumentAsync(string idDoc, string ippr, int idConversation, int idStic, string x_idTechPsConnecte = null, System.Collections.Generic.IEnumerable<FormatDocEnum> formats = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idDoc == null)
                throw new System.ArgumentNullException("idDoc");

            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            if (idConversation == null)
                throw new System.ArgumentNullException("idConversation");

            if (idStic == null)
                throw new System.ArgumentNullException("idStic");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/conversations/patient/{ippr}/{idConversation}/documents/{idStic}/{idDoc}?");
            urlBuilder_.Replace("{idDoc}", System.Uri.EscapeDataString(ConvertToString(idDoc, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idConversation}", System.Uri.EscapeDataString(ConvertToString(idConversation, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idStic}", System.Uri.EscapeDataString(ConvertToString(idStic, System.Globalization.CultureInfo.InvariantCulture)));
            if (formats != null)
            {
                foreach (var item_ in formats) { urlBuilder_.Append(System.Uri.EscapeDataString("formats") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MultiDoc>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Envoi d'une notification MyHop au Patient dans le cas d'un nouveau message reçu dans une conversation de MaSantéConnectée
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Message de notification envoyé avec succes</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Conversations_NotifyMyHopForUnreadInConversationAsync(string x_idTechPsConnecte = null, MyHopNotifyPayLoad payLoad = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/conversations/patient/notifymyhop");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(payLoad, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur lors de l\'envoi du message de notification", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Envoi d'un message dans une conversation
        /// </summary>
        /// <param name="idConversation">Identifiant de la conversation</param>
        /// <param name="payload">Données liées au message</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Identifiant de l'échange créé</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> Conversations_AddMessageToConversationAsync(int idConversation, AddMessageToConversationPayload payload, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idConversation == null)
                throw new System.ArgumentNullException("idConversation");

            if (payload == null)
                throw new System.ArgumentNullException("payload");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/conversations/sollicitation/{idConversation}");
            urlBuilder_.Replace("{idConversation}", System.Uri.EscapeDataString(ConvertToString(idConversation, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(payload, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 415)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Le format du fichier n\'est pas support\u00e9", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur pendant l\'enregistrement du fichier", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recupération des infos relatives à l'échange lié à un document à savoir : 
        /// <br/>-	Liste des destinataires (avec pour chacun d’eux l’information lu/ non lu)
        /// <br/>-	Date d’envoi
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InfoEchange> Conversations_GetInfoEchangeAsync(string idTechPsIdentifie, int? idConversation, int? idEchange, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/conversations/infoEchange?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(idTechPsIdentifie != null ? ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("idConversation") + "=").Append(System.Uri.EscapeDataString(idConversation != null ? ConvertToString(idConversation, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("idEchange") + "=").Append(System.Uri.EscapeDataString(idEchange != null ? ConvertToString(idEchange, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InfoEchange>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Compte le nombre de conversations non lus avec un détail par status (EstArchive, EstFavori, EstAtraiter)
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<ConversationTypeEnum, CountByConversationStatus>> Conversations_CountConversationsByTypesAsync(string x_idTechPsConnecte = null, System.Collections.Generic.IEnumerable<string> idTechPsCibles = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/conversations/count?");
            if (idTechPsCibles != null)
            {
                foreach (var item_ in idTechPsCibles) { urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsCibles") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<ConversationTypeEnum, CountByConversationStatus>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Marque toutes les conversations de l'utilisateur comme lues/archivées
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Conversations_UpdateConversationsUtilisateurV2Async(string x_idTechPsConnecte = null, UpdateConversationsUtilisateurV2 req = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/conversations/v2/status");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(req, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupération de l'ensemble des documents de travail liés
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="ippr">Identifiant régional du dossier patient</param>
        /// <param name="offset">Index du premier élément à retourner (défaut : 0)</param>
        /// <param name="limit">Nombre maximum d'éléments à retourner (défaut : 100)</param>
        /// <param name="idTechPsIdentifie">Identifiant du professionnel de santé identifié</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IPagedResultsOfDocumentTravail> DocumentsTravail_GetAllAsync(string x_idTechPsConnecte = null, string ippr = null, int? offset = null, int? limit = null, string idTechPsIdentifie = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/documents-travail?");
            if (ippr != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ippr") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idTechPsIdentifie != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IPagedResultsOfDocumentTravail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Création d'un document de travail
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="value">Document de travail à créer</param>
        /// <param name="idTechPsIdentifie">Identifiant du professionnel de santé identifié</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<decimal> DocumentsTravail_PostAsync(string x_idTechPsConnecte = null, DocumentTravail2 value = null, string idTechPsIdentifie = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/documents-travail?");
            if (idTechPsIdentifie != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(value, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<decimal>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupération d'un document de travail à partir de son identifiant technique
        /// </summary>
        /// <param name="id">Identifiant technique du document de travail</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="idTechPsIdentifie">Identifiant du professionnel de santé identifié</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DocumentTravail> DocumentsTravail_GetAsync(int id, string x_idTechPsConnecte = null, string idTechPsIdentifie = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/documents-travail/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (idTechPsIdentifie != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DocumentTravail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mise à jour complète d'un document de travail
        /// </summary>
        /// <param name="id">Identifiant technique du document de travail</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="value">Document de travail à mettre à jour</param>
        /// <param name="idTechPsIdentifie">Identifiant du professionnel de santé identifié</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DocumentsTravail_PutAsync(int id, string x_idTechPsConnecte = null, DocumentTravail value = null, string idTechPsIdentifie = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/documents-travail/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (idTechPsIdentifie != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(value, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Suppression d'un document de travail
        /// </summary>
        /// <param name="id">Identifiant technique du document de travail</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="idTechPsIdentifie">Identifiant du professionnel de santé identifié</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DocumentsTravail_DeleteAsync(int id, string x_idTechPsConnecte = null, string idTechPsIdentifie = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/documents-travail/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (idTechPsIdentifie != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Envoi d'un document de travail
        /// </summary>
        /// <remarks>
        /// Le document de travail envoyé doit obligatoirement avoir les champs suivants renseignés :
        /// <br/>* Auteur
        /// <br/>* Expéditeur
        /// <br/>* Contenu OU Commentaire OU IdFichierTravail
        /// <br/>* IdTypePiece
        /// </remarks>
        /// <param name="id">Identifiant technique du document de travail</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="idTechPsIdentifie">Identifiant du professionnel de santé identifié</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DocumentTravailSendResult> DocumentsTravail_SendAsync(decimal id, string x_idTechPsConnecte = null, string idTechPsIdentifie = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/documents-travail/{id}/send?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (idTechPsIdentifie != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DocumentTravailSendResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Envoi d'une demande d'avis à partir d'un document de travail
        /// </summary>
        /// <remarks>
        /// Le document de travail envoyé doit obligatoirement avoir les champs suivants renseignés :
        /// <br/>* Auteur
        /// <br/>* Expéditeur
        /// <br/>* Contenu OU Commentaire OU IdFichierTravail
        /// <br/>* IdTypePiece
        /// </remarks>
        /// <param name="idDocumentTravail">Identifiant technique du document de travail</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DocumentTravailSendResult> DocumentsTravail_SendDemandeAvisAsync(decimal idDocumentTravail, string x_idTechPsConnecte = null, SendDemandeAvisRequest request = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idDocumentTravail == null)
                throw new System.ArgumentNullException("idDocumentTravail");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/documents-travail/{idDocumentTravail}/send-demande-avis");
            urlBuilder_.Replace("{idDocumentTravail}", System.Uri.EscapeDataString(ConvertToString(idDocumentTravail, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DocumentTravailSendResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Envoi réponse à un auteur de doc
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DocumentTravailSendResult> DocumentsTravail_SendReponseAuteurAsync(string idTechPsIdentifie, string x_idTechPsConnecte = null, ReponseInfos reponseInfos = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/documents-travail/send-reponse-auteur?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(idTechPsIdentifie != null ? ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(reponseInfos, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DocumentTravailSendResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// connected user can use identity of identified user ?
        /// </summary>
        /// <param name="idTechPsConnecte">Connected user technical id</param>
        /// <param name="idTechPsIdentifie">Identified user technical id</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Identité utilisable</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> Delegation_CanUseIdentityOrGetFromCacheAsync(string idTechPsConnecte, string idTechPsIdentifie, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Delegation/CanUseIdentity?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsConnecte") + "=").Append(System.Uri.EscapeDataString(idTechPsConnecte != null ? ConvertToString(idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(idTechPsIdentifie != null ? ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets All types of piece.
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TypePiece>> Nomenclature_GetAllTypesPieceAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nomenclature/alltypespiece");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TypePiece>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets All structures.
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Etablissement>> Nomenclature_GetAllStructuresAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nomenclature/allstructures");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Etablissement>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get al CPAM
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CPAM>> Nomenclature_GetAllCPAMAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nomenclature/allcpam");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CPAM>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all pieces categories
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CategorieTypePiece>> Nomenclature_GetAllPieceCategoriesAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nomenclature/allpiececategories");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CategorieTypePiece>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all types of intervention
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TypeIntervention>> Nomenclature_GetAllTypesInterventionAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nomenclature/alltypesintervention");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TypeIntervention>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets All intervention categories
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CategorieIntervention>> Nomenclature_GetAllInterventionCategoriesAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nomenclature/allinterventioncategories");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CategorieIntervention>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets All statuts acteur
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StatutActeur>> Nomenclature_GetAllStatutsActeurAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nomenclature/allstatutsacteur");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<StatutActeur>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets All planifications
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Planification>> Nomenclature_GetAllPlanificationsAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nomenclature/allplanifications");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Planification>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all pathologies
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Pathologie>> Nomenclature_GetAllPathologiesAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nomenclature/allpathologies");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Pathologie>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recherche de toutes les modalités d'exercice
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ModaliteExercice>> Nomenclature_GetModalitesExerciceAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nomenclature/modalitesexercice");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ModaliteExercice>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recherche de tous les cadres d'exercice
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CadreExercice>> Nomenclature_GetCadresExerciceAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nomenclature/cadresexercice");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CadreExercice>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recherche de toutes les professions existantes
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Profession>> Nomenclature_GetAllProfessionsAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nomenclature/allprofessions");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Profession>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recherche de toutes les spécialités existantes
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Specialite>> Nomenclature_GetAllSpecialitesAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nomenclature/allspecialites");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Specialite>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupère toutes les étiquettes régionales existantes
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Etiquette>> Nomenclature_GetAllRegionaleEtiquettesAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nomenclature/allregionaleetiquettes");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Etiquette>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get coordonees GPS by IdsTechPs (array inside body)
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CoordonneesGPS>> Nomenclature_GetCoordonneesGPSByIdTechPsAsync(string x_idTechPsConnecte = null, GetCoordonneesGPSByIdTechPsRequest request = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nomenclature/coordoneesgps");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CoordonneesGPS>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Rafraichit le cache couchbase des professions
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CouchBaseCache_RefreshProfessioCacheAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/couchbaseCache/professions/refresh");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Trace d'une action
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Trace emise</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task TraceJournal_TraceActionAutomatiqueAPIMesPatientsAsync(string x_idTechPsConnecte = null, ActionUtilisateur actionUtilisateur = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Trace");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(actionUtilisateur, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="searchParams">un objet contenant la chaine de caractère 'nomsPrenom', le tableau (la liste) 'idsTechAexclure', et le nombre 'maxResults'</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UtilisateurActeurLight>> Professionnels_FindPsByCriteriaAsync(string x_idTechPsConnecte = null, SearchRequestModel searchParams = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Professionnels");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(searchParams, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UtilisateurActeurLight>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Trouve le PS via son identifiant technique : PS détaillé renvoyé
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UtilisateurExtended> Professionnels_FindPsByIdTechAsync(string idTechPsIdentifie, string idTechPs, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idTechPsIdentifie == null)
                throw new System.ArgumentNullException("idTechPsIdentifie");

            if (idTechPs == null)
                throw new System.ArgumentNullException("idTechPs");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Professionnels/idTechPs/{idTechPs}/idTechPsIdentifie/{idTechPsIdentifie}");
            urlBuilder_.Replace("{idTechPsIdentifie}", System.Uri.EscapeDataString(ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTechPs}", System.Uri.EscapeDataString(ConvertToString(idTechPs, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UtilisateurExtended>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recherche de l'identifiant technique d'un PS à partir de son IdCart ou RPPS ou Adeli
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> Professionnels_FindIdTechUtilisateurByIdNatAsync(string idNatPs, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idNatPs == null)
                throw new System.ArgumentNullException("idNatPs");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Professionnels/idTechUser/{idNatPs}");
            urlBuilder_.Replace("{idNatPs}", System.Uri.EscapeDataString(ConvertToString(idNatPs, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recherche les infos du PS connecté et ses delegants
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Utilisateur>> Professionnels_GetDelegantsAndConnectedUserAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Professionnels/delegantsAndConnectedUser");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Utilisateur>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recherche les infos du PS connecté et ses delegants
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UtilisateurVisionneuse>> Professionnels_GetVisionneuseDelegantsAndConnectedUserAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Professionnels/visionneuse/delegantsAndConnectedUser");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UtilisateurVisionneuse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste des délégants d'un Ps
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Utilisateur>> Professionnels_GetDelegantsPSAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Professionnels/delegants");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Utilisateur>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupère la file active du PS c.a.d les patients suivis par le PS (dans MesPatients)
        /// <br/>Service utilisé par MonSisra pour charger la liste des patients à inclure à une conversation
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PatientFileActive>> Professionnels_GetFileActiveAsync(string idTechPsIdentifie, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Professionnels/GetFileActive?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(idTechPsIdentifie != null ? ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PatientFileActive>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récuperer la liste des utilisateurs proscrit pour un patient donné (ippr)
        /// </summary>
        /// <param name="ippr">ippr du patient pour lequel on cherche les proscrits</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Liste des utilisateurs proscrits sur le dossier</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UtilisateurActeurLight>> HabilitationDossierPatient_GetProscritsAsync(string ippr, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Dossiers/{ippr}/Proscrits");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UtilisateurActeurLight>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retirer un proscrit dans la liste des proscrits sur un dossier (ippr)
        /// </summary>
        /// <param name="ippr">ippr du patient pour lequel on cherche les proscrits</param>
        /// <param name="idTechPsCible">suppression un PS dans la liste des proscrits</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Suppresssion réussie</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task HabilitationDossierPatient_RetirerProscritAsync(string ippr, string idTechPsCible, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            if (idTechPsCible == null)
                throw new System.ArgumentNullException("idTechPsCible");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Dossiers/{ippr}/Proscrits/{idTechPsCible}");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTechPsCible}", System.Uri.EscapeDataString(ConvertToString(idTechPsCible, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("le PS n\'existait pas dans la table des proscrit", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter un proscrit dans la liste des proscrit sur un dossier (ippr)
        /// </summary>
        /// <param name="ippr">ippr du patient pour lequel on cherche les proscrits</param>
        /// <param name="idTechPsCible">ajouter un PS dans la liste des proscrits</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Ajout réussi</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task HabilitationDossierPatient_AjouterProscritAsync(string ippr, string idTechPsCible, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            if (idTechPsCible == null)
                throw new System.ArgumentNullException("idTechPsCible");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Dossiers/{ippr}/Proscrits/{idTechPsCible}");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTechPsCible}", System.Uri.EscapeDataString(ConvertToString(idTechPsCible, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupère la liste des utilisateurs habilités sur le dossier patient (d'ippr passé en paramètre).
        /// </summary>
        /// <param name="ippr">ippr du patient pour lequel on cherche les mandats</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UtilisateurActeurLight>> HabilitationDossierPatient_GetHabilitesWithInfoActeurAsync(string ippr, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Dossiers/{ippr}/Mandats");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UtilisateurActeurLight>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupère la liste des utilisateurs ayant une habilitation désactivée sur le DP.
        /// </summary>
        /// <param name="ippr">ippr du patient pour lequel on cherche les mandats</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UtilisateurActeurLight>> HabilitationDossierPatient_GetHabilitesDesactivesWithInfoAsync(string ippr, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Dossiers/{ippr}/Mandats/HabilitationDesactivee");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UtilisateurActeurLight>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste des délégants d'un Ps (liste des PS ayant donné la délégation à l'utilisateur)
        /// </summary>
        /// <param name="idTechPsConnecte">Le PS connecté</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Utilisateur>> HabilitationDossierPatient_GetDelegantsPSAsync(string idTechPsConnecte, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Dossiers/Delegants?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsConnecte") + "=").Append(System.Uri.EscapeDataString(idTechPsConnecte != null ? ConvertToString(idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Utilisateur>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste des délégués d'un Ps (liste des PS ayant accès au compte du PS donné en paramètre)
        /// </summary>
        /// <param name="idTechPs">Le PS connecté</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Utilisateur>> HabilitationDossierPatient_GetDeleguesPSAsync(string idTechPs, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Dossiers/Delegues?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPs") + "=").Append(System.Uri.EscapeDataString(idTechPs != null ? ConvertToString(idTechPs, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Utilisateur>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permet de supprimer le mandat d'un PS pour un dossier donné (ippr)
        /// </summary>
        /// <param name="ippr">ippr du patient pour lequel on veut supprimer le mandat</param>
        /// <param name="idTechPsCible">id du PS dont on veut supprimer le mandat</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Suppresssion réussie</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task HabilitationDossierPatient_RetirerHabAsync(string ippr, string idTechPsCible, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            if (idTechPsCible == null)
                throw new System.ArgumentNullException("idTechPsCible");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Dossiers/{ippr}/Mandats/{idTechPsCible}");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTechPsCible}", System.Uri.EscapeDataString(ConvertToString(idTechPsCible, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter une habilitation d'un ps sur un dossier (ippr)
        /// </summary>
        /// <param name="ippr">ippr du patient pour lequel on cherche les proscrits</param>
        /// <param name="idTechPsCible">ajouter un PS dans la liste des proscrits</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Ajout réussi</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task HabilitationDossierPatient_AjouterHabAsync(string ippr, string idTechPsCible, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            if (idTechPsCible == null)
                throw new System.ArgumentNullException("idTechPsCible");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Dossiers/{ippr}/Mandats/{idTechPsCible}");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTechPsCible}", System.Uri.EscapeDataString(ConvertToString(idTechPsCible, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter un acteur au dossier patient
        /// </summary>
        /// <param name="ippr">ippr du patient pour lequel on cherche les proscrits</param>
        /// <param name="idTechPsCible">ajouter un PS dans la liste des proscrits</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Ajout réussi</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task HabilitationDossierPatient_AjouterActeurAsync(string ippr, string idTechPsCible, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            if (idTechPsCible == null)
                throw new System.ArgumentNullException("idTechPsCible");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Dossiers/{ippr}/Acteurs/{idTechPsCible}");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTechPsCible}", System.Uri.EscapeDataString(ConvertToString(idTechPsCible, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retirer un acteur du dossier patient
        /// </summary>
        /// <param name="ippr">ippr du patient pour lequel on cherche les proscrits</param>
        /// <param name="idTechPsCible">ajouter un PS dans la liste des proscrits</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Supprression réussie</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task HabilitationDossierPatient_RetirerActeurAsync(string ippr, string idTechPsCible, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            if (idTechPsCible == null)
                throw new System.ArgumentNullException("idTechPsCible");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Dossiers/{ippr}/Acteurs/{idTechPsCible}");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTechPsCible}", System.Uri.EscapeDataString(ConvertToString(idTechPsCible, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupération des acteurs non habilités d'un dossier (ippr)
        /// </summary>
        /// <param name="ippr">ippr du patient pour lequel on cherche les proscrits</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UtilisateurActeurLight>> HabilitationDossierPatient_GetActeursDossierNonHabilitesAsync(string ippr, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Dossiers/{ippr}/Acteurs/NonHabilites");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UtilisateurActeurLight>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permet de récupérer l'habilitation du ps identifié sur le dossier du patient lié à l'ippr (en prenant en compte si le ps connecté est proscrit)
        /// <br/>Lié aux habilitations actu
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HabilitationsActusPatient> HabilitationDossierPatient_GetHabilitationInfoForPsAsync(string ippr, string idTechPsIdentifie, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            if (idTechPsIdentifie == null)
                throw new System.ArgumentNullException("idTechPsIdentifie");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Dossiers/{ippr}/HabilitationPS/{idTechPsIdentifie}");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTechPsIdentifie}", System.Uri.EscapeDataString(ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HabilitationsActusPatient>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permet de récupérer l'habilitation du ps identifié sur le dossier du patient lié à l'ippr (en prenant en compte si le ps connecté est proscrit)
        /// <br/>Habilitations générales
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HabilitationDossierPatient> HabilitationDossierPatient_GetHabilitationDossierAsync(string ippr, string idTechPsIdentifie, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            if (idTechPsIdentifie == null)
                throw new System.ArgumentNullException("idTechPsIdentifie");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Dossiers/{ippr}/HabilitationDossier/{idTechPsIdentifie}");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTechPsIdentifie}", System.Uri.EscapeDataString(ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HabilitationDossierPatient>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permet de récupérer savoir si le PS est habilité sur le dossier IPPR
        /// <br/>Habilitations générales
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> HabilitationDossierPatient_IsHabiliteDossierAsync(string ippr, string idTechPsIdentifie, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            if (idTechPsIdentifie == null)
                throw new System.ArgumentNullException("idTechPsIdentifie");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Dossiers/{ippr}/IsHabiliteDossier/{idTechPsIdentifie}");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{idTechPsIdentifie}", System.Uri.EscapeDataString(ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Renvoie si le ps a le droit d'accès à un dossier patient (via mode bris de glace)
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> HabilitationDossierPatient_HasAccesBrisGlaceAuthorizedAsync(string ippr, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Dossiers/{ippr}/BrisGlaceAuthorized");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Active/Désactive l'interdiction d'accès à un dossier patient (via mode bris de glace)
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>MAJ réussie</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task HabilitationDossierPatient_MajAccesDossierViaBrisGlaceAsync(string ippr, string x_idTechPsConnecte = null, bool? accesBrisGlace = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Dossiers/{ippr}/BrisGlace");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(accesBrisGlace, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Envoi d'un rappel
        /// </summary>
        /// <param name="idEvenement">Id de l'évènement dont il faut envoyer le (ou les) rappel(s)</param>
        /// <param name="dateHeureRappel">Date du rappel</param>
        /// <param name="dateEvenement">Date de l'évènement correspondant au rappel</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Rappel_SendRappelsAsync(string idEvenement, System.DateTimeOffset dateHeureRappel, System.DateTimeOffset dateEvenement, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idEvenement == null)
                throw new System.ArgumentNullException("idEvenement");

            if (dateHeureRappel == null)
                throw new System.ArgumentNullException("dateHeureRappel");

            if (dateEvenement == null)
                throw new System.ArgumentNullException("dateEvenement");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/rappels/{idEvenement}?");
            urlBuilder_.Replace("{idEvenement}", System.Uri.EscapeDataString(ConvertToString(idEvenement, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("dateHeureRappel") + "=").Append(System.Uri.EscapeDataString(dateHeureRappel.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("dateEvenement") + "=").Append(System.Uri.EscapeDataString(dateEvenement.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Dépôt d'un message IHE  dans la file MSMQ appropriée
        /// </summary>
        /// <remarks>
        /// Ce service met en queue le message mais ne garantit pas son bon traitement par la suite.
        /// </remarks>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="iheZepra">Requête zepraSynchrone IHE</param>
        /// <returns>Envoi du message réussi</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Soumission_DeposeIheAsync(string x_idTechPsConnecte = null, ProvideAndRegisterDocumentSetRequestType iheZepra = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/soumission/IHE");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(iheZepra, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Requ\u00eate invalide", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Dépôt d'un message CDA HL7 dans la file MSMQ appropriée
        /// </summary>
        /// <remarks>
        /// Ce service met en queue le message mais ne garantit pas son bon traitement par la suite.
        /// </remarks>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="documentCDA">Document CDA HL7</param>
        /// <returns>Envoi du message réussi</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Soumission_DeposeCdaAsync(string x_idTechPsConnecte = null, POCD_MT000040ClinicalDocument documentCDA = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/soumission/CDA");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(documentCDA, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Requ\u00eate invalide", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload d'un fichier travail
        /// </summary>
        /// <param name="idDocumentTravail">Id du document travail auquel la piece jointe est attachée</param>
        /// <param name="file">Fichier</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="idTypePiece">Id du type de la piece jointe</param>
        /// <returns>Fichier enregistré avec succes</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FichiersTravail_UploadAsync(int idDocumentTravail, FileParameter file, string x_idTechPsConnecte = null, decimal? idTypePiece = null, string idTechPsIdentifie = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idDocumentTravail == null)
                throw new System.ArgumentNullException("idDocumentTravail");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/fichiersTravail/upload?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idDocumentTravail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idDocumentTravail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (idTypePiece != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idTypePiece") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idTypePiece, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idTechPsIdentifie != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 415)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Le format du fichier n\'est pas support\u00e9", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur pendant l\'enregistrement du fichier", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload d'un fichier travail à partir de l'id conversation
        /// <br/>Crée un document de travail et y ajoute un fichier
        /// </summary>
        /// <param name="idConversation">Id de la conversation à laquelle la piece jointe est attachée</param>
        /// <param name="ippr">IPPR (11550)</param>
        /// <param name="file">Fichier</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="idTypePiece">Id du type de la piece jointe</param>
        /// <returns>Fichier enregistré avec succes</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FichiersTravail_UploadFromConversationAsync(int idConversation, string ippr, FileParameter file, string x_idTechPsConnecte = null, decimal? idTypePiece = null, string idTechPsIdentifie = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idConversation == null)
                throw new System.ArgumentNullException("idConversation");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/fichiersTravail/uploadFromConversation?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idConversation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idConversation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("ippr") + "=").Append(System.Uri.EscapeDataString(ippr != null ? ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            if (idTypePiece != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idTypePiece") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idTypePiece, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idTechPsIdentifie != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 415)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Le format du fichier n\'est pas support\u00e9", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur pendant l\'enregistrement du fichier", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Met a jour le type d'un fichierTravail
        /// </summary>
        /// <param name="idFichierTravail">identifiant du fichierTravail</param>
        /// <param name="idTypePiece">nouveau typePiece du fichierTravail</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Type Fichier Travail modifié avec succes</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FichiersTravail_UpdateFichierTravailTypeAsync(string idFichierTravail, int idTypePiece, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idFichierTravail == null)
                throw new System.ArgumentNullException("idFichierTravail");

            if (idTypePiece == null)
                throw new System.ArgumentNullException("idTypePiece");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/fichiersTravail/{idFichierTravail}/type?");
            urlBuilder_.Replace("{idFichierTravail}", System.Uri.EscapeDataString(ConvertToString(idFichierTravail, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("idTypePiece") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idTypePiece, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Met a jour le type d'un fichierTravail
        /// </summary>
        /// <param name="idFichierTravail">identifiant du fichierTravail</param>
        /// <param name="datePiece">nouvelle date du fichierTravail</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Date Fichier Travail modifié avec succes</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FichiersTravail_UpdateFichierTravailDateAsync(string idFichierTravail, System.DateTimeOffset datePiece, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idFichierTravail == null)
                throw new System.ArgumentNullException("idFichierTravail");

            if (datePiece == null)
                throw new System.ArgumentNullException("datePiece");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/fichiersTravail/{idFichierTravail}/date?");
            urlBuilder_.Replace("{idFichierTravail}", System.Uri.EscapeDataString(ConvertToString(idFichierTravail, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("datePiece") + "=").Append(System.Uri.EscapeDataString(datePiece.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Génération de l'export de la synthèse en fonction d'un IPPR et d'une liste de formulaires
        /// </summary>
        /// <param name="idTechPsIdentifie">idTechPs identifié</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FichierNomme> SyntheseFormulairePDF_GenerateExportSynthesePDFAsync(string idTechPsIdentifie, string ippr, bool condense, string x_idTechPsConnecte = null, System.Collections.Generic.IEnumerable<TypeSectionExportPDF> listeSections = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (condense == null)
                throw new System.ArgumentNullException("condense");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/syntheseformulaire/GenerateExportSynthesePDF?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(idTechPsIdentifie != null ? ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("ippr") + "=").Append(System.Uri.EscapeDataString(ippr != null ? ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("condense") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condense, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(listeSections, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FichierNomme>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Génération et envoi de l'export de la synthèse en fonction d'un IPPR et d'une liste de formulaires à une liste de destinataires
        /// </summary>
        /// <param name="idTechPsIdentifie">idTechPs identifié</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DocumentTravailSendResult2> SyntheseFormulairePDF_SendExportSynthesePDFAsync(string idTechPsIdentifie, string ippr, bool condense, bool copiePatient, string x_idTechPsConnecte = null, SendExportSynthesePDFRequest request = null, int? idConversation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (condense == null)
                throw new System.ArgumentNullException("condense");

            if (copiePatient == null)
                throw new System.ArgumentNullException("copiePatient");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/syntheseformulaire/SendExportSynthesePDF?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(idTechPsIdentifie != null ? ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("ippr") + "=").Append(System.Uri.EscapeDataString(ippr != null ? ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("condense") + "=").Append(System.Uri.EscapeDataString(ConvertToString(condense, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("copiePatient") + "=").Append(System.Uri.EscapeDataString(ConvertToString(copiePatient, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (idConversation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idConversation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idConversation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DocumentTravailSendResult2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Création d'une visioconférence
        /// </summary>
        /// <param name="idTechPsIdentifie">idTechPs identifié</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="visio">visioconférence à créer</param>
        /// <returns>id de la visio</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> Visios_PostAsync(string idTechPsIdentifie, string x_idTechPsConnecte = null, Visio visio = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/visios?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(idTechPsIdentifie != null ? ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(visio, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Met à jour la date de modification d'un participant à une visioconférence après réception d'un keepAlive.
        /// </summary>
        /// <param name="roomName">Nom de la salle de visioconférence</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="idTechPsIdentifie">login du participant</param>
        /// <returns>Nom et prénom du participant</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> Visios_KeepAliveAsync(string roomName, string x_idTechPsConnecte = null, string idTechPsIdentifie = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (roomName == null)
                throw new System.ArgumentNullException("roomName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/visios/{roomName}/keepalive?");
            urlBuilder_.Replace("{roomName}", System.Uri.EscapeDataString(ConvertToString(roomName, System.Globalization.CultureInfo.InvariantCulture)));
            if (idTechPsIdentifie != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupération d'un participant à une visioconférence par son identifiant
        /// </summary>
        /// <param name="roomName">Nom de la salle de visio</param>
        /// <param name="idTechPs">Login du participant</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Le participant de la visioconférence</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VisioParticipant> Visios_GetVisioParticipantAsync(string roomName, string idTechPs, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/visios/participant?");
            urlBuilder_.Append(System.Uri.EscapeDataString("roomName") + "=").Append(System.Uri.EscapeDataString(roomName != null ? ConvertToString(roomName, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPs") + "=").Append(System.Uri.EscapeDataString(idTechPs != null ? ConvertToString(idTechPs, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VisioParticipant>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupère la liste de toutes les professions avec leurs différents identifiants
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ValueSet> ValueSet_GetAllProfessionsAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ValueSet/professions");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ValueSet>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupère la liste de toutes les spécialités
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ValueSet> ValueSet_GetAllSpecialitesAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ValueSet/specialites");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ValueSet>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupère la liste de toutes les pathologies
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ValueSet> ValueSet_GetAllPathologiesAsync(string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ValueSet/pathologies");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ValueSet>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Création ou mise à jour d'un patient
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> Patient_CreateOrUpdatePatientAsync(string idTechPsIdentifie, string x_idTechPsConnecte = null, SticPatientRecord request = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Patient?");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(idTechPsIdentifie != null ? ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recherche de patient selon certains critères
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="nomNaissance">Nom de naissance</param>
        /// <param name="nomUsuel">Nom usuel</param>
        /// <param name="prenom">Prénom</param>
        /// <param name="dateNaissance">Date de naissance</param>
        /// <param name="sexe">Sexe</param>
        /// <param name="ville">Ville de naissance ou de résidence</param>
        /// <param name="codePostal">Code postal de naissance ou de résidence</param>
        /// <param name="codePaysNaissance">Code du pays de naissance (code INSEE)</param>
        /// <param name="offset">Index du premier élément à retourner (défaut : 0)</param>
        /// <param name="limit">Nombre maximum d'éléments à retourner (défaut : 100)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Bundle> Patient_SearchAsync(string x_idTechPsConnecte = null, string nomNaissance = null, string nomUsuel = null, string prenom = null, System.DateTimeOffset? dateNaissance = null, SexeEnum? sexe = null, string ville = null, string codePostal = null, int? codePaysNaissance = null, int? offset = null, int? limit = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Patient/search?");
            if (nomNaissance != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("NomNaissance") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nomNaissance, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nomUsuel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("NomUsuel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nomUsuel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (prenom != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Prenom") + "=").Append(System.Uri.EscapeDataString(ConvertToString(prenom, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dateNaissance != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DateNaissance") + "=").Append(System.Uri.EscapeDataString(dateNaissance.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sexe != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Sexe") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sexe, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ville != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Ville") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ville, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (codePostal != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CodePostal") + "=").Append(System.Uri.EscapeDataString(ConvertToString(codePostal, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (codePaysNaissance != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("codePaysNaissance") + "=").Append(System.Uri.EscapeDataString(ConvertToString(codePaysNaissance, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Bundle>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupération d'un patient FHIR à partir de son IPPR
        /// </summary>
        /// <param name="ippr">IPPR</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Retourne une ressource Patient FHIR</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Patient2> Patient_GetByIpprAsync(string ippr, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Patient/{ippr}");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Patient2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Désactivation d'un patient (suppression logique) à partir de son IPPR
        /// </summary>
        /// <param name="ippr">ippr</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Patient_DisablePatientAsync(string ippr, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Patient/{ippr}");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupération des informations de contact d'un patient =&amp;gt; Le patient + son téléphone et son mail
        /// </summary>
        /// <param name="ippr">Identifiant régional du patient</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>le patient</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Patient2> Patient_GetPatientWithContactByIpprAsync(string ippr, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Patient/contact/{ippr}");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Patient2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupération d'un patient à partir de son IPPL et IdDomaine
        /// </summary>
        /// <param name="ippl">ippl</param>
        /// <param name="idDomaine">IdDomaine</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Retourne une ressource Patient FHIR</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Patient2> Patient_GetByIpplAsync(string ippl, int idDomaine, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippl == null)
                throw new System.ArgumentNullException("ippl");

            if (idDomaine == null)
                throw new System.ArgumentNullException("idDomaine");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Patient/{IPPL}?");
            urlBuilder_.Replace("{ippl}", System.Uri.EscapeDataString(ConvertToString(ippl, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("IdDomaine") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idDomaine, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Patient2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Création d'un compte ViaPatient pour un patient donné
        /// </summary>
        /// <param name="ippr">IPPR du patient</param>
        /// <param name="patientUtilisateur">Le patient et le compte utilisateur à associer (et à créer si besoin)</param>
        /// <param name="idTechPsIdentifie">Identifiant du Professionnel de santé identifié</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="rattachementForce">Si on force le rattachement même si le compte utilisateur existe déja</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MyHopCreationCompteMscCodeRetour> Patient_CreateMyHopAccountAsync(string ippr, MyHopPatientUtilisateur patientUtilisateur, string idTechPsIdentifie, string x_idTechPsConnecte = null, bool? rattachementForce = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            if (patientUtilisateur == null)
                throw new System.ArgumentNullException("patientUtilisateur");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Patient/{ippr}/myhop?");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(idTechPsIdentifie != null ? ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            if (rattachementForce != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("rattachementForce") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rattachementForce, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(patientUtilisateur, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MyHopCreationCompteMscCodeRetour>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Renvoie si un patient a un compte ViaPatient
        /// </summary>
        /// <param name="ippr">IPPR du patient</param>
        /// <param name="idTechPsIdentifie">Identifiant du Professionnel de santé identifié</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> Patient_HasMyHopAccountAsync(string ippr, string idTechPsIdentifie, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Patient/{ippr}/myhop?");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(idTechPsIdentifie != null ? ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupération d'un patient à partir de son IPPR
        /// </summary>
        /// <param name="ippr">IPPR</param>
        /// <param name="synchronizeTraitsEtendusWithFormulaire">Synchronisation des traits étendus du patient dans le formulaire (UTILISE UNIQUEMENT POUR LE bandeau patient)</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Patient> Patient_RecupererPatientAsync(string ippr, string idTechPsIdentifie, bool synchronizeTraitsEtendusWithFormulaire, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            if (synchronizeTraitsEtendusWithFormulaire == null)
                throw new System.ArgumentNullException("synchronizeTraitsEtendusWithFormulaire");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Patient/socle/{ippr}?");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(idTechPsIdentifie != null ? ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("synchronizeTraitsEtendusWithFormulaire") + "=").Append(System.Uri.EscapeDataString(ConvertToString(synchronizeTraitsEtendusWithFormulaire, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Patient>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupération de la date d'inclusion d'un patient dans la file active d'un PS
        /// </summary>
        /// <param name="ippr">IPPR du patient</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InfoDateInclusion> Patient_GetDateInclusionIfPsActeurAsync(string ippr, string idTechPsIdentifie, string idTechPsCible, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Patient/inclusion/{ippr}?");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(idTechPsIdentifie != null ? ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsCible") + "=").Append(System.Uri.EscapeDataString(idTechPsCible != null ? ConvertToString(idTechPsCible, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InfoDateInclusion>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Envoi d'un message de FIN pour notifier MonEspaceSante que le PS
        /// <br/>ne souhaite pas que le patient lui réponde
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <returns>Message de notification de FIN de l'échange avec le patient, envoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Patient_EnvoiMailFinEchangePatientAsync(string emailMSSAuteur, string adresseMSSPatient, string x_idTechPsConnecte = null, int? idEchange = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Patient/patient/notifierFinEchangePatient?");
            urlBuilder_.Append(System.Uri.EscapeDataString("emailMSSAuteur") + "=").Append(System.Uri.EscapeDataString(emailMSSAuteur != null ? ConvertToString(emailMSSAuteur, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("adresseMSSPatient") + "=").Append(System.Uri.EscapeDataString(adresseMSSPatient != null ? ConvertToString(adresseMSSPatient, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            if (idEchange != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idEchange") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idEchange, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur lors de l\'envoi du message de notification de FIN de l\'\u00e9change avec le patient.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return string encodée relative au paramètres passés
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> Patient_GetEncryptedParamsAsync(string patientDetailString, string appName, int? codeFonction, string idTechPsIdentifie, bool paramsEnClair, string x_idTechPsConnecte = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (paramsEnClair == null)
                throw new System.ArgumentNullException("paramsEnClair");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Patient/encryptedParams?");
            urlBuilder_.Append(System.Uri.EscapeDataString("patientDetailString") + "=").Append(System.Uri.EscapeDataString(patientDetailString != null ? ConvertToString(patientDetailString, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("appName") + "=").Append(System.Uri.EscapeDataString(appName != null ? ConvertToString(appName, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("codeFonction") + "=").Append(System.Uri.EscapeDataString(codeFonction != null ? ConvertToString(codeFonction, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(idTechPsIdentifie != null ? ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("paramsEnClair") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paramsEnClair, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Met à jour les traits étendu du patient
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Patient_UpdateTraitEtenduPatientAsync(string ippr, string idTechPsIdentifie, string x_idTechPsConnecte = null, UpdateTraitsEtenduRequest request = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ippr == null)
                throw new System.ArgumentNullException("ippr");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Patient/{ippr}/traitsetendus?");
            urlBuilder_.Replace("{ippr}", System.Uri.EscapeDataString(ConvertToString(ippr, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(idTechPsIdentifie != null ? ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture) : "")).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recherche d'un professionnel de santé à partir son identifiant technique (IdTechPS)
        /// </summary>
        /// <param name="idTechPS">IdTechPS du professionnel recherché</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="idTechPSIdentifie">IdTechPSIdentifie du requeteur</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Practitioner> Practitioner_GetAsync(string idTechPS, string x_idTechPsConnecte = null, string idTechPSIdentifie = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idTechPS == null)
                throw new System.ArgumentNullException("idTechPS");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Practitioner/{idTechPS}?");
            urlBuilder_.Replace("{idTechPS}", System.Uri.EscapeDataString(ConvertToString(idTechPS, System.Globalization.CultureInfo.InvariantCulture)));
            if (idTechPSIdentifie != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idTechPSIdentifie") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idTechPSIdentifie, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Practitioner>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupération d'un professionnel de santé par IdNational
        /// </summary>
        /// <param name="idNational">IdNational du professionnel</param>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="idTechPSIdentifie">IdTechPsIdentifié du requeteur</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> Practitioner_GetByIdNatAsync(string idNational, string x_idTechPsConnecte = null, string idTechPSIdentifie = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idNational == null)
                throw new System.ArgumentNullException("idNational");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Practitioner/idnat/{idNational}?");
            urlBuilder_.Replace("{idNational}", System.Uri.EscapeDataString(ConvertToString(idNational, System.Globalization.CultureInfo.InvariantCulture)));
            if (idTechPSIdentifie != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idTechPSIdentifie") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idTechPSIdentifie, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recherche d'un professionnel de santé selon certains critères
        /// </summary>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="n">Nom et/ou prénom</param>
        /// <param name="pro">Identifiants de profession</param>
        /// <param name="spe">Identifiants de spécialité</param>
        /// <param name="ville">Ville</param>
        /// <param name="codepostal">Code postal</param>
        /// <param name="morale">Recherche sur les personnes morales</param>
        /// <param name="offset">Index du premier élément à retourner (défaut : 0)</param>
        /// <param name="limit">Nombre maximum d'éléments à retourner (défaut : 100)</param>
        /// <returns>Retourne un bundle contenant une collection de ressources Practitioner FHIR correspondants aux critères de recherche</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Bundle> Practitioner_SearchAsync(string x_idTechPsConnecte = null, string n = null, System.Collections.Generic.IEnumerable<int> pro = null, System.Collections.Generic.IEnumerable<int> spe = null, string ville = null, string codepostal = null, bool? morale = null, int? offset = null, int? limit = null, string idTechPsIdentifie = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Practitioner/search?");
            if (n != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("n") + "=").Append(System.Uri.EscapeDataString(ConvertToString(n, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pro != null)
            {
                foreach (var item_ in pro) { urlBuilder_.Append(System.Uri.EscapeDataString("pro") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (spe != null)
            {
                foreach (var item_ in spe) { urlBuilder_.Append(System.Uri.EscapeDataString("spe") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ville != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ville") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ville, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (codepostal != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("codepostal") + "=").Append(System.Uri.EscapeDataString(ConvertToString(codepostal, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (morale != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("morale") + "=").Append(System.Uri.EscapeDataString(ConvertToString(morale, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idTechPsIdentifie != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idTechPsIdentifie") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idTechPsIdentifie, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Bundle>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Création d'un professionnel de santé à partir d'un modèle Practitioner FHIR
        /// </summary>
        /// <remarks>
        /// Les informations non prises en charge par le modèle FHIR sont dans le champ Extension de la ressource.
        /// <br/>Les informations sur les professions et spécialités d'un professionnel de santé sont accessible via les services ValueSet.
        /// <br/>Le professionnel doit au moins avoir les informations suivantes:
        /// <br/>             * Nom (Usuel ou de naissance)
        /// <br/>             * Prenom
        /// <br/>             * un IdProfession existant si une profession est spécifiée (cf ValueSet/professions)
        /// <br/>             * un IdProfession existant pour la spécialité correspondante si elle est spécifiée
        /// </remarks>
        /// <param name="x_idTechPsConnecte">Identifiant du Professionnel de santé connecté</param>
        /// <param name="value">Modèle de professionnel à modifier/compléter</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> Practitioner_PostAsync(string x_idTechPsConnecte = null, Practitioner value = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Practitioner");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_idTechPsConnecte != null)
                        request_.Headers.TryAddWithoutValidation("x-idTechPsConnecte", ConvertToString(x_idTechPsConnecte, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(value, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("A server side error occurred.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DocumentContenu
    {
        [Newtonsoft.Json.JsonProperty("Contenu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Contenu { get; set; }

        [Newtonsoft.Json.JsonProperty("MimeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MimeType { get; set; }

        [Newtonsoft.Json.JsonProperty("Extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class GetContenuDocumentPayload
    {
        /// <summary>
        /// Identifiant local du document
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdLocalDoc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdLocalDoc { get; set; }

        /// <summary>
        /// Domaine d'identification du document (idStic de l'établissement identificateur du document)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DomaineIdLocalDoc", Required = Newtonsoft.Json.Required.Always)]
        public int DomaineIdLocalDoc { get; set; }

        /// <summary>
        /// Format contenu demandé
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Always)]
        public FormatDocEnum Format { get; set; }

        /// <summary>
        /// Métadonnées lié au document permettant de générer le PDF SARA avec entete et pied de page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PieceDossierToPdfinfo Metadata { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum FormatDocEnum
    {

        ORIGINAL = 0,

        PDF = 1,

        HTML = 2,

        IMAGES = 3,

        TEXT = 4,

        VIGNETTE = 5,

        PDF_PIVOT = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class PieceDossierToPdfinfo
    {
        [Newtonsoft.Json.JsonProperty("Patient_NomJeunefille", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patient_NomJeunefille { get; set; }

        [Newtonsoft.Json.JsonProperty("Patient_Nom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patient_Nom { get; set; }

        [Newtonsoft.Json.JsonProperty("Patient_Prenom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patient_Prenom { get; set; }

        [Newtonsoft.Json.JsonProperty("Patient_DateNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Patient_DateNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("Patient_CodeSexe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Patient_CodeSexe { get; set; }

        [Newtonsoft.Json.JsonProperty("Piece_Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Piece_Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Piece_IdEtablissament", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Piece_IdEtablissament { get; set; }

        [Newtonsoft.Json.JsonProperty("Piece_IdLocalDocument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Piece_IdLocalDocument { get; set; }

        [Newtonsoft.Json.JsonProperty("Piece_NomEtablissement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Piece_NomEtablissement { get; set; }

        [Newtonsoft.Json.JsonProperty("Piece_ValideLe", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Piece_ValideLe { get; set; }

        [Newtonsoft.Json.JsonProperty("Piece_CommentaireInvalidation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Piece_CommentaireInvalidation { get; set; }

        [Newtonsoft.Json.JsonProperty("Piece_NomPrenomAuteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Piece_NomPrenomAuteur { get; set; }

        [Newtonsoft.Json.JsonProperty("Piece_DateActe", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Piece_DateActe { get; set; }

        [Newtonsoft.Json.JsonProperty("Piece_LibellePiece", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Piece_LibellePiece { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class MultiDoc
    {
        [Newtonsoft.Json.JsonProperty("Contenu", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public byte[] Contenu { get; set; }

        [Newtonsoft.Json.JsonProperty("Libelle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Libelle { get; set; }

        [Newtonsoft.Json.JsonProperty("IdLocalDoc", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IdLocalDoc { get; set; }

        [Newtonsoft.Json.JsonProperty("IdStic", Required = Newtonsoft.Json.Required.Always)]
        public int IdStic { get; set; }

        [Newtonsoft.Json.JsonProperty("MimeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string MimeType { get; set; }

        [Newtonsoft.Json.JsonProperty("Extension", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Extension { get; set; }

        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Always)]
        public FormatDocEnum Format { get; set; }

        [Newtonsoft.Json.JsonProperty("NumeroImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumeroImage { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalImages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalImages { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum ProcessPriorityClass
    {

        Normal = 32,

        Idle = 64,

        High = 128,

        RealTime = 256,

        BelowNormal = 16384,

        AboveNormal = 32768,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FullMetadataDoc
    {
        [Newtonsoft.Json.JsonProperty("IdPieceTechnique", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdPieceTechnique { get; set; }

        [Newtonsoft.Json.JsonProperty("IdLocalDoc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdLocalDoc { get; set; }

        [Newtonsoft.Json.JsonProperty("IdTypePiece", Required = Newtonsoft.Json.Required.Always)]
        public decimal IdTypePiece { get; set; }

        [Newtonsoft.Json.JsonProperty("LibelleTypePiece", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LibelleTypePiece { get; set; }

        [Newtonsoft.Json.JsonProperty("Libelle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        [Newtonsoft.Json.JsonProperty("DateActe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateActe { get; set; }

        [Newtonsoft.Json.JsonProperty("DateCreation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateCreation { get; set; }

        [Newtonsoft.Json.JsonProperty("DateMod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateMod { get; set; }

        [Newtonsoft.Json.JsonProperty("DateCrea", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateCrea { get; set; }

        [Newtonsoft.Json.JsonProperty("DateDemandePartageMsc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateDemandePartageMsc { get; set; }

        [Newtonsoft.Json.JsonProperty("DateDemandePartageDmp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateDemandePartageDmp { get; set; }

        [Newtonsoft.Json.JsonProperty("DatePartageDmp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DatePartageDmp { get; set; }

        [Newtonsoft.Json.JsonProperty("IdFicheHybrid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdFicheHybrid { get; set; }

        [Newtonsoft.Json.JsonProperty("StatutReponseDmp", Required = Newtonsoft.Json.Required.Always)]
        public CodeStatutDmp StatutReponseDmp { get; set; }

        [Newtonsoft.Json.JsonProperty("DateValidation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateValidation { get; set; }

        [Newtonsoft.Json.JsonProperty("Commentaire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commentaire { get; set; }

        [Newtonsoft.Json.JsonProperty("Importance", Required = Newtonsoft.Json.Required.Always)]
        public ImportanceDocumentEnum Importance { get; set; }

        [Newtonsoft.Json.JsonProperty("Statut", Required = Newtonsoft.Json.Required.Always)]
        public StatutPieceDossierEnum Statut { get; set; }

        [Newtonsoft.Json.JsonProperty("InvalidationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InvalidationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("InvalidationCommentaire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvalidationCommentaire { get; set; }

        [Newtonsoft.Json.JsonProperty("Invalidateur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InfoPS Invalidateur { get; set; }

        [Newtonsoft.Json.JsonProperty("Etablissement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadonneesDocumentEtablissement Etablissement { get; set; }

        [Newtonsoft.Json.JsonProperty("Auteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadonneesDocumentUtilisateur Auteur { get; set; }

        [Newtonsoft.Json.JsonProperty("Expediteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadonneesDocumentUtilisateur Expediteur { get; set; }

        [Newtonsoft.Json.JsonProperty("UtilisateursHabilites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetadonneesDocumentUtilisateurHabilite> UtilisateursHabilites { get; set; }

        [Newtonsoft.Json.JsonProperty("Patient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataPatient Patient { get; set; }

        [Newtonsoft.Json.JsonProperty("ImagerieIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImagerieIds ImagerieIds { get; set; }

        [Newtonsoft.Json.JsonProperty("PiecesLiees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PieceLiee> PiecesLiees { get; set; }

        [Newtonsoft.Json.JsonProperty("IdConversation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdConversation { get; set; }

        [Newtonsoft.Json.JsonProperty("Prive", Required = Newtonsoft.Json.Required.Always)]
        public bool Prive { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum CodeStatutDmp
    {

        SUCCES = 0,

        ERREUR_VERIFICATION_INS = 1,

        ERREUR_TEST_EXISTENCE_DMP = 2,

        ERREUR_PARTAGE_DMP = 3,

        DOCUMENTS_TOUS_FILTRES = 4,

        DOCUMENT_DMP_NON_TROUVE = 5,

        DMP_NON_OUVERT = 6,

        INTERRUPTION_DEDOUBLONNAGE = 7,

        ERREUR_VERIFICATION_ID_TYPE_PIECE = 8,

        ERREUR_VERIFICATION_PDF = 9,

        ERREUR_VERIFICATION_ID_DOMAINE = 10,

        ERREUR_TRACE_REQUETE_PARTAGE_DMP_INEXISTANT = 11,

        RECEPTION = 12,

        ERREUR_TRACE_RECEPTION = 13,

        ERREUR_DOMAINE_INEXISTANT = 14,

        ERREUR_COMBINAISON_CONFIDENTIALITY_CODE = 15,

        ION_INVALIDE_PARAMETRES = 16,

        ERREUR_RECEPTION_INVALIDE_PARAMETRES = 17,

        ERREUR_SYSTEME = 18,

        ERREUR_SYSTEME_DMP = 19,

        ERREUR_DMP_CLOSED = 20,

        ERREUR = 21,

        PENDING_RESPONSE = -1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum ImportanceDocumentEnum
    {

        Basse = 0,

        Normale = 1,

        Importante = 2,

        Vitale = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum StatutPieceDossierEnum
    {

        IN = 0,

        VA = 1,

        TP = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class InfoPS
    {
        [Newtonsoft.Json.JsonProperty("IdTechnique", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IdTechnique { get; set; }

        [Newtonsoft.Json.JsonProperty("IdCarte", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IdCarte { get; set; }

        [Newtonsoft.Json.JsonProperty("Adeli", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Adeli { get; set; }

        [Newtonsoft.Json.JsonProperty("Rpps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rpps { get; set; }

        [Newtonsoft.Json.JsonProperty("Civilite", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Civilite { get; set; }

        [Newtonsoft.Json.JsonProperty("Nom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Nom { get; set; }

        [Newtonsoft.Json.JsonProperty("Prenom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Prenom { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("IdSpecialite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdSpecialite { get; set; }

        [Newtonsoft.Json.JsonProperty("NomSpecialite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomSpecialite { get; set; }

        [Newtonsoft.Json.JsonProperty("Couleur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Couleur { get; set; }

        [Newtonsoft.Json.JsonProperty("IdProfession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdProfession { get; set; }

        [Newtonsoft.Json.JsonProperty("NomProfession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomProfession { get; set; }

        [Newtonsoft.Json.JsonProperty("Commune", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commune { get; set; }

        [Newtonsoft.Json.JsonProperty("CodePostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodePostal { get; set; }

        [Newtonsoft.Json.JsonProperty("ZeroPapier", Required = Newtonsoft.Json.Required.Always)]
        public bool ZeroPapier { get; set; }

        [Newtonsoft.Json.JsonProperty("EmailMss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailMss { get; set; }

        [Newtonsoft.Json.JsonProperty("EstMorale", Required = Newtonsoft.Json.Required.Always)]
        public bool EstMorale { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class MetadonneesDocumentEtablissement
    {
        [Newtonsoft.Json.JsonProperty("IdEtablissement", Required = Newtonsoft.Json.Required.Always)]
        public decimal IdEtablissement { get; set; }

        [Newtonsoft.Json.JsonProperty("Finess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Finess { get; set; }

        [Newtonsoft.Json.JsonProperty("Nom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nom { get; set; }

        [Newtonsoft.Json.JsonProperty("NomCourt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomCourt { get; set; }

        [Newtonsoft.Json.JsonProperty("Oid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Oid { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class MetadonneesDocumentUtilisateur
    {
        [Newtonsoft.Json.JsonProperty("IdTechnique", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdTechnique { get; set; }

        [Newtonsoft.Json.JsonProperty("IdCarte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdCarte { get; set; }

        [Newtonsoft.Json.JsonProperty("RPPS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RPPS { get; set; }

        [Newtonsoft.Json.JsonProperty("Adeli", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Adeli { get; set; }

        [Newtonsoft.Json.JsonProperty("Nom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nom { get; set; }

        [Newtonsoft.Json.JsonProperty("Prenom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prenom { get; set; }

        [Newtonsoft.Json.JsonProperty("Mail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mail { get; set; }

        [Newtonsoft.Json.JsonProperty("IdSpecialite", Required = Newtonsoft.Json.Required.Always)]
        public decimal IdSpecialite { get; set; }

        [Newtonsoft.Json.JsonProperty("LibelleSpecialite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LibelleSpecialite { get; set; }

        [Newtonsoft.Json.JsonProperty("IdProfession", Required = Newtonsoft.Json.Required.Always)]
        public decimal IdProfession { get; set; }

        [Newtonsoft.Json.JsonProperty("LibelleProfession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LibelleProfession { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class MetadonneesDocumentUtilisateurHabilite
    {
        [Newtonsoft.Json.JsonProperty("Nom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nom { get; set; }

        [Newtonsoft.Json.JsonProperty("Prenom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prenom { get; set; }

        [Newtonsoft.Json.JsonProperty("LibelleSpecialite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LibelleSpecialite { get; set; }

        [Newtonsoft.Json.JsonProperty("IdTechPs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdTechPs { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class MetadataPatient
    {
        [Newtonsoft.Json.JsonProperty("IPPR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IPPR { get; set; }

        [Newtonsoft.Json.JsonProperty("NomNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("NomUsuel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomUsuel { get; set; }

        [Newtonsoft.Json.JsonProperty("Prenom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prenom { get; set; }

        [Newtonsoft.Json.JsonProperty("DateNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("Sexe", Required = Newtonsoft.Json.Required.Always)]
        public SexeEnum Sexe { get; set; }

        [Newtonsoft.Json.JsonProperty("CodePaysNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodePaysNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("LibellePaysNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LibellePaysNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("CodePostalNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodePostalNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("VilleNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VilleNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("NomNaissanceFictif", Required = Newtonsoft.Json.Required.Always)]
        public bool NomNaissanceFictif { get; set; }

        [Newtonsoft.Json.JsonProperty("NomUsuelFictif", Required = Newtonsoft.Json.Required.Always)]
        public bool NomUsuelFictif { get; set; }

        [Newtonsoft.Json.JsonProperty("PrenomFictif", Required = Newtonsoft.Json.Required.Always)]
        public bool PrenomFictif { get; set; }

        [Newtonsoft.Json.JsonProperty("DateNaissanceFictif", Required = Newtonsoft.Json.Required.Always)]
        public bool DateNaissanceFictif { get; set; }

        [Newtonsoft.Json.JsonProperty("SexeFictif", Required = Newtonsoft.Json.Required.Always)]
        public bool SexeFictif { get; set; }

        [Newtonsoft.Json.JsonProperty("StatutIdentiteIns", Required = Newtonsoft.Json.Required.Always)]
        public StatutIdentiteIns StatutIdentiteIns { get; set; }

        [Newtonsoft.Json.JsonProperty("Ins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ins { get; set; }

        [Newtonsoft.Json.JsonProperty("EstNia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EstNia { get; set; }

        [Newtonsoft.Json.JsonProperty("PrenomUsuel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrenomUsuel { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum SexeEnum
    {

        F = 0,

        M = 1,

        I = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum StatutIdentiteIns
    {

        None = 0,

        Provisoire = 1,

        Recuperee = 2,

        Validee = 3,

        Qualifiee = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ImagerieIds
    {
        [Newtonsoft.Json.JsonProperty("AccessionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("StudyUid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StudyUid { get; set; }

        [Newtonsoft.Json.JsonProperty("Idproducteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Idproducteur { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class PieceLiee
    {
        [Newtonsoft.Json.JsonProperty("IdPiece", Required = Newtonsoft.Json.Required.Always)]
        public int IdPiece { get; set; }

        [Newtonsoft.Json.JsonProperty("IdLocalDoc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdLocalDoc { get; set; }

        [Newtonsoft.Json.JsonProperty("IdEts", Required = Newtonsoft.Json.Required.Always)]
        public int IdEts { get; set; }

        [Newtonsoft.Json.JsonProperty("LibellePiece", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LibellePiece { get; set; }

        [Newtonsoft.Json.JsonProperty("DateCreation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateCreation { get; set; }

    }

    /// <summary>
    /// Visioconférence
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Visio : BaseOfVisioAndVisioconference
    {
        /// <summary>
        /// Date de création
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DateCreation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateCreation { get; set; }

        /// <summary>
        /// Identifiant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>
        /// Identifiant de la conversation liée
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdConversation", Required = Newtonsoft.Json.Required.Always)]
        public int IdConversation { get; set; }

        /// <summary>
        /// Nom de la salle de visio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RoomName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RoomName { get; set; }

    }

    /// <summary>
    /// Classe de base des objets du modèle
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class BaseOfVisioAndVisioconference
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ConversationPatient
    {
        [Newtonsoft.Json.JsonProperty("IdConversation", Required = Newtonsoft.Json.Required.Always)]
        public int IdConversation { get; set; }

        [Newtonsoft.Json.JsonProperty("IdDossierPatient", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IdDossierPatient { get; set; }

        [Newtonsoft.Json.JsonProperty("DateDernierEchangeConversation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset DateDernierEchangeConversation { get; set; }

        [Newtonsoft.Json.JsonProperty("DateLecture", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateLecture { get; set; }

        [Newtonsoft.Json.JsonProperty("Sujet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Sujet { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Destinataires", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<InfoPSDestinataireWithPatientHimself> Destinataires { get; set; } = new System.Collections.ObjectModel.Collection<InfoPSDestinataireWithPatientHimself>();

        [Newtonsoft.Json.JsonProperty("NombreNonLu", Required = Newtonsoft.Json.Required.Always)]
        public int NombreNonLu { get; set; }

        [Newtonsoft.Json.JsonProperty("PatientPeutRepondre", Required = Newtonsoft.Json.Required.Always)]
        public bool PatientPeutRepondre { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class InfoPSDestinataireWithPatientHimself : InfoPSDestinataire
    {
        [Newtonsoft.Json.JsonProperty("IsPatientHimself", Required = Newtonsoft.Json.Required.Always)]
        public bool IsPatientHimself { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class InfoPSDestinataire : InfoPS
    {
        [Newtonsoft.Json.JsonProperty("DateLecture", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateLecture { get; set; }

        [Newtonsoft.Json.JsonProperty("EchangeEstLu", Required = Newtonsoft.Json.Required.Always)]
        public bool EchangeEstLu { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ConversationEchangesPatient : ConversationBase
    {
        [Newtonsoft.Json.JsonProperty("EchangeDetails", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<EchangeDetail> EchangeDetails { get; set; } = new System.Collections.ObjectModel.Collection<EchangeDetail>();

        [Newtonsoft.Json.JsonProperty("Destinataires", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<InfoPSDestinataireWithPatientHimself> Destinataires { get; set; } = new System.Collections.ObjectModel.Collection<InfoPSDestinataireWithPatientHimself>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class EchangeDetail : EchangeBase
    {
        [Newtonsoft.Json.JsonProperty("Documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetadonneesDoc> Documents { get; set; }

        [Newtonsoft.Json.JsonProperty("IdSpecialiteAuteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdSpecialiteAuteur { get; set; }

        [Newtonsoft.Json.JsonProperty("CiviliteAuteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CiviliteAuteur { get; set; }

        [Newtonsoft.Json.JsonProperty("AuteurEMailMSS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuteurEMailMSS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class MetadonneesDoc
    {
        [Newtonsoft.Json.JsonProperty("IdPieceTechnique", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdPieceTechnique { get; set; }

        [Newtonsoft.Json.JsonProperty("IdEchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdEchange { get; set; }

        [Newtonsoft.Json.JsonProperty("IdLocalDoc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdLocalDoc { get; set; }

        [Newtonsoft.Json.JsonProperty("IdTypePiece", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdTypePiece { get; set; }

        [Newtonsoft.Json.JsonProperty("LibelleTypePiece", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LibelleTypePiece { get; set; }

        [Newtonsoft.Json.JsonProperty("Libelle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        [Newtonsoft.Json.JsonProperty("DateCreation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateCreation { get; set; }

        [Newtonsoft.Json.JsonProperty("Commentaire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commentaire { get; set; }

        [Newtonsoft.Json.JsonProperty("Importance", Required = Newtonsoft.Json.Required.Always)]
        public ImportanceDocumentEnum Importance { get; set; }

        [Newtonsoft.Json.JsonProperty("Statut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatutPieceDossierEnum? Statut { get; set; }

        [Newtonsoft.Json.JsonProperty("InvalidationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InvalidationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("InvalidationCommentaire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvalidationCommentaire { get; set; }

        [Newtonsoft.Json.JsonProperty("Invalidateur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InfoPS Invalidateur { get; set; }

        [Newtonsoft.Json.JsonProperty("Etablissement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Etablissement Etablissement { get; set; }

        [Newtonsoft.Json.JsonProperty("Auteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InfoPS Auteur { get; set; }

        [Newtonsoft.Json.JsonProperty("Expediteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InfoPS Expediteur { get; set; }

        [Newtonsoft.Json.JsonProperty("Patient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Patient Patient { get; set; }

        [Newtonsoft.Json.JsonProperty("IsCommentaireOnly", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCommentaireOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("IdPiecePereReponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdPiecePereReponse { get; set; }

        [Newtonsoft.Json.JsonProperty("InfoMedicale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InfoMedicale { get; set; }

        [Newtonsoft.Json.JsonProperty("Synthese", Required = Newtonsoft.Json.Required.Always)]
        public bool Synthese { get; set; }

        [Newtonsoft.Json.JsonProperty("Urgence", Required = Newtonsoft.Json.Required.Always)]
        public bool Urgence { get; set; }

        [Newtonsoft.Json.JsonProperty("UrlViewerDocument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlViewerDocument { get; set; }

        [Newtonsoft.Json.JsonProperty("PieceEstStockee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PieceEstStockee { get; set; }

        [Newtonsoft.Json.JsonProperty("HabilitationDoc", Required = Newtonsoft.Json.Required.Always)]
        public HabilitationDocEnum HabilitationDoc { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Etablissement
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public decimal Id { get; set; }

        [Newtonsoft.Json.JsonProperty("NumFiness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumFiness { get; set; }

        [Newtonsoft.Json.JsonProperty("NumSiret", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumSiret { get; set; }

        [Newtonsoft.Json.JsonProperty("Nom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nom { get; set; }

        [Newtonsoft.Json.JsonProperty("NomCourt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomCourt { get; set; }

        [Newtonsoft.Json.JsonProperty("Adresse1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Adresse1 { get; set; }

        [Newtonsoft.Json.JsonProperty("Adresse2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Adresse2 { get; set; }

        [Newtonsoft.Json.JsonProperty("CodePostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodePostal { get; set; }

        [Newtonsoft.Json.JsonProperty("Ville", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ville { get; set; }

        [Newtonsoft.Json.JsonProperty("Oid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Oid { get; set; }

        [Newtonsoft.Json.JsonProperty("AdresseMsmq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdresseMsmq { get; set; }

        [Newtonsoft.Json.JsonProperty("UrlServiceWebbn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlServiceWebbn { get; set; }

        [Newtonsoft.Json.JsonProperty("FileMsmqDcc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileMsmqDcc { get; set; }

        [Newtonsoft.Json.JsonProperty("IpBoiteNoire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IpBoiteNoire { get; set; }

        [Newtonsoft.Json.JsonProperty("ConnecteImagerie", Required = Newtonsoft.Json.Required.Always)]
        public bool ConnecteImagerie { get; set; }

        [Newtonsoft.Json.JsonProperty("IsReintegrationCompatible", Required = Newtonsoft.Json.Required.Always)]
        public bool IsReintegrationCompatible { get; set; }

        [Newtonsoft.Json.JsonProperty("AlimentProchainsRDV", Required = Newtonsoft.Json.Required.Always)]
        public bool AlimentProchainsRDV { get; set; }

        [Newtonsoft.Json.JsonProperty("VersionViewerImg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionViewerImg { get; set; }

        [Newtonsoft.Json.JsonProperty("UserIw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserIw { get; set; }

        [Newtonsoft.Json.JsonProperty("PasswordIw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PasswordIw { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerIw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerIw { get; set; }

        [Newtonsoft.Json.JsonProperty("VersionIw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionIw { get; set; }

        [Newtonsoft.Json.JsonProperty("KeepInlineScriptsInDocuments", Required = Newtonsoft.Json.Required.Always)]
        public bool KeepInlineScriptsInDocuments { get; set; }

        [Newtonsoft.Json.JsonProperty("DomainName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DomainName { get; set; }

        [Newtonsoft.Json.JsonProperty("FileMsmqAlertes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileMsmqAlertes { get; set; }

        [Newtonsoft.Json.JsonProperty("EmailAlertes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAlertes { get; set; }

        [Newtonsoft.Json.JsonProperty("DateModification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateModification { get; set; }

        [Newtonsoft.Json.JsonProperty("DateCreation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateCreation { get; set; }

        [Newtonsoft.Json.JsonProperty("CadreExerciceDefaut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CadreExerciceDefaut { get; set; }

        [Newtonsoft.Json.JsonProperty("ModaliteExerciceDefaut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModaliteExerciceDefaut { get; set; }

        [Newtonsoft.Json.JsonProperty("ReintegrationFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReintegrationFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("ReintegrationIsPjEncapsule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReintegrationIsPjEncapsule { get; set; }

        [Newtonsoft.Json.JsonProperty("ReintegrationFormatIdSejour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReintegrationFormatIdSejour { get; set; }

        [Newtonsoft.Json.JsonProperty("ReintegrationIdSejourStatique", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReintegrationIdSejourStatique { get; set; }

        [Newtonsoft.Json.JsonProperty("ReintegrationSeparateurORU", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReintegrationSeparateurORU { get; set; }

        [Newtonsoft.Json.JsonProperty("ReintegrationApplicationReceptrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReintegrationApplicationReceptrice { get; set; }

        [Newtonsoft.Json.JsonProperty("ReintegrationBloquerEnvoi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReintegrationBloquerEnvoi { get; set; }

        [Newtonsoft.Json.JsonProperty("ReintegrationReceptionIpplFictif", Required = Newtonsoft.Json.Required.Always)]
        public bool ReintegrationReceptionIpplFictif { get; set; }

        [Newtonsoft.Json.JsonProperty("ZepraReponseHprim", Required = Newtonsoft.Json.Required.Always)]
        public bool ZepraReponseHprim { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Patient
    {
        [Newtonsoft.Json.JsonProperty("IPPR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IPPR { get; set; }

        [Newtonsoft.Json.JsonProperty("NomNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("NomUsuel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomUsuel { get; set; }

        [Newtonsoft.Json.JsonProperty("Prenom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prenom { get; set; }

        [Newtonsoft.Json.JsonProperty("DateNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("Sexe", Required = Newtonsoft.Json.Required.Always)]
        public SexeEnum Sexe { get; set; }

        [Newtonsoft.Json.JsonProperty("CodePaysNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodePaysNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("LibellePaysNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LibellePaysNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("CodePostalNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodePostalNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("VilleNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VilleNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("Supprime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Supprime { get; set; }

        [Newtonsoft.Json.JsonProperty("AccesBrisGlace", Required = Newtonsoft.Json.Required.Always)]
        public bool AccesBrisGlace { get; set; }

        [Newtonsoft.Json.JsonProperty("NomNaissanceFictif", Required = Newtonsoft.Json.Required.Always)]
        public bool NomNaissanceFictif { get; set; }

        [Newtonsoft.Json.JsonProperty("NomUsuelFictif", Required = Newtonsoft.Json.Required.Always)]
        public bool NomUsuelFictif { get; set; }

        [Newtonsoft.Json.JsonProperty("PrenomFictif", Required = Newtonsoft.Json.Required.Always)]
        public bool PrenomFictif { get; set; }

        [Newtonsoft.Json.JsonProperty("DateNaissanceFictif", Required = Newtonsoft.Json.Required.Always)]
        public bool DateNaissanceFictif { get; set; }

        [Newtonsoft.Json.JsonProperty("SexeFictif", Required = Newtonsoft.Json.Required.Always)]
        public bool SexeFictif { get; set; }

        [Newtonsoft.Json.JsonProperty("Adresse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Adresse { get; set; }

        [Newtonsoft.Json.JsonProperty("CPVille", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CPVille { get; set; }

        [Newtonsoft.Json.JsonProperty("ComplementAdresse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ComplementAdresse { get; set; }

        [Newtonsoft.Json.JsonProperty("TelephoneFixe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelephoneFixe { get; set; }

        [Newtonsoft.Json.JsonProperty("TelephoneMobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelephoneMobile { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("StatutIdentiteIns", Required = Newtonsoft.Json.Required.Always)]
        public StatutIdentiteIns StatutIdentiteIns { get; set; }

        [Newtonsoft.Json.JsonProperty("NirPatient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NirPatient { get; set; }

        [Newtonsoft.Json.JsonProperty("IsNirPatientNia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsNirPatientNia { get; set; }

        [Newtonsoft.Json.JsonProperty("CompteMscActif", Required = Newtonsoft.Json.Required.Always)]
        public bool CompteMscActif { get; set; }

        [Newtonsoft.Json.JsonProperty("PrenomUsuel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrenomUsuel { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum HabilitationDocEnum
    {

        NonHabilite = 0,

        HabiliteDossier = 1,

        HabiliteDocument = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class EchangeBase
    {
        [Newtonsoft.Json.JsonProperty("IdEchange", Required = Newtonsoft.Json.Required.Always)]
        public int IdEchange { get; set; }

        [Newtonsoft.Json.JsonProperty("IdConversation", Required = Newtonsoft.Json.Required.Always)]
        public int IdConversation { get; set; }

        [Newtonsoft.Json.JsonProperty("Importance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Importance { get; set; }

        [Newtonsoft.Json.JsonProperty("DateEnvoi", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateEnvoi { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageHtml", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageHtml { get; set; }

        [Newtonsoft.Json.JsonProperty("IdAuteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdAuteur { get; set; }

        [Newtonsoft.Json.JsonProperty("NomAuteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomAuteur { get; set; }

        [Newtonsoft.Json.JsonProperty("PrenomAuteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrenomAuteur { get; set; }

        [Newtonsoft.Json.JsonProperty("EmailAuteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAuteur { get; set; }

        [Newtonsoft.Json.JsonProperty("SpecialiteAuteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpecialiteAuteur { get; set; }

        [Newtonsoft.Json.JsonProperty("IdExpediteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdExpediteur { get; set; }

        [Newtonsoft.Json.JsonProperty("NomExpediteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomExpediteur { get; set; }

        [Newtonsoft.Json.JsonProperty("PrenomExpediteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrenomExpediteur { get; set; }

        [Newtonsoft.Json.JsonProperty("EmailExpediteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailExpediteur { get; set; }

        [Newtonsoft.Json.JsonProperty("SpecialiteExpediteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpecialiteExpediteur { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageID { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageIdWS", Required = Newtonsoft.Json.Required.Always)]
        public int MessageIdWS { get; set; }

        [Newtonsoft.Json.JsonProperty("AdresseMSSPatient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdresseMSSPatient { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ConversationBase
    {
        [Newtonsoft.Json.JsonProperty("IdConversation", Required = Newtonsoft.Json.Required.Always)]
        public int IdConversation { get; set; }

        [Newtonsoft.Json.JsonProperty("IdTechPs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IdTechPs { get; set; }

        [Newtonsoft.Json.JsonProperty("IdDossierPatient", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IdDossierPatient { get; set; }

        [Newtonsoft.Json.JsonProperty("EstATraiter", Required = Newtonsoft.Json.Required.Always)]
        public bool EstATraiter { get; set; }

        [Newtonsoft.Json.JsonProperty("EstArchive", Required = Newtonsoft.Json.Required.Always)]
        public bool EstArchive { get; set; }

        [Newtonsoft.Json.JsonProperty("EstFavori", Required = Newtonsoft.Json.Required.Always)]
        public bool EstFavori { get; set; }

        [Newtonsoft.Json.JsonProperty("DateDernierEchangeConversation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset DateDernierEchangeConversation { get; set; }

        [Newtonsoft.Json.JsonProperty("DateLecture", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateLecture { get; set; }

        [Newtonsoft.Json.JsonProperty("Sujet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Sujet { get; set; }

        [Newtonsoft.Json.JsonProperty("EstPartagee", Required = Newtonsoft.Json.Required.Always)]
        public bool EstPartagee { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("PatientPeutRepondre", Required = Newtonsoft.Json.Required.Always)]
        public bool PatientPeutRepondre { get; set; }

        [Newtonsoft.Json.JsonProperty("DernierMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DernierMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("DernierAuteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DernierAuteur { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ConversationUtilisateurDto
    {
        [Newtonsoft.Json.JsonProperty("IdTechPsIdentifie", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IdTechPsIdentifie { get; set; }

        [Newtonsoft.Json.JsonProperty("Archiver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Archiver { get; set; }

        [Newtonsoft.Json.JsonProperty("Atraiter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Atraiter { get; set; }

        [Newtonsoft.Json.JsonProperty("Favori", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Favori { get; set; }

        [Newtonsoft.Json.JsonProperty("EstLu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EstLu { get; set; }

        [Newtonsoft.Json.JsonProperty("EstActif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EstActif { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class AddEchangeInConversationPayload
    {
        /// <summary>
        /// Fichiers à transmettre en base64
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FileBase64EncodedExtended> Files { get; set; }

        /// <summary>
        /// Message de l'échange
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FileBase64EncodedExtended : FileBase64Encoded
    {
        [Newtonsoft.Json.JsonProperty("IsImage", Required = Newtonsoft.Json.Required.Always)]
        public bool IsImage { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FileBase64Encoded : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("MimeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string MimeType { get; set; }

        [Newtonsoft.Json.JsonProperty("FileName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FileName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class MyHopNotifyPayLoad
    {
        [Newtonsoft.Json.JsonProperty("Ippr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ippr { get; set; }

        [Newtonsoft.Json.JsonProperty("CodeSite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeSite { get; set; }

        [Newtonsoft.Json.JsonProperty("Expediteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expediteur { get; set; }

        [Newtonsoft.Json.JsonProperty("Titre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Titre { get; set; }

        [Newtonsoft.Json.JsonProperty("Corps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Corps { get; set; }

        [Newtonsoft.Json.JsonProperty("DateExpiration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateExpiration { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class AddMessageToConversationPayload
    {
        [Newtonsoft.Json.JsonProperty("FileToSend", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileBase64Encoded FileToSend { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Finalized", Required = Newtonsoft.Json.Required.Always)]
        public bool Finalized { get; set; }

        [Newtonsoft.Json.JsonProperty("IdTechPsAuteur", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IdTechPsAuteur { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class InfoEchange
    {
        [Newtonsoft.Json.JsonProperty("Destinataires", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InfoPSDestinataire> Destinataires { get; set; }

        [Newtonsoft.Json.JsonProperty("DateEnvoi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateEnvoi { get; set; }

        [Newtonsoft.Json.JsonProperty("IsConvPrivee", Required = Newtonsoft.Json.Required.Always)]
        public bool IsConvPrivee { get; set; }

        [Newtonsoft.Json.JsonProperty("EstFavori", Required = Newtonsoft.Json.Required.Always)]
        public bool EstFavori { get; set; }

        [Newtonsoft.Json.JsonProperty("EstATraiter", Required = Newtonsoft.Json.Required.Always)]
        public bool EstATraiter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum ConversationTypeEnum
    {

        Conversation = 0,

        Resultat = 1,

        RendezVous = 2,

        Courrier = 3,

        MSS = 4,

        EchangePatient = 5,

        MSSPatient = 6,

        CourrierPatient = 7,

        DGS = 8,

        TeleExpertise = 9,

        DemandeAppui = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CountByConversationStatus
    {
        [Newtonsoft.Json.JsonProperty("Tous", Required = Newtonsoft.Json.Required.Always)]
        public int Tous { get; set; }

        [Newtonsoft.Json.JsonProperty("EstArchive", Required = Newtonsoft.Json.Required.Always)]
        public int EstArchive { get; set; }

        [Newtonsoft.Json.JsonProperty("EstFavori", Required = Newtonsoft.Json.Required.Always)]
        public int EstFavori { get; set; }

        [Newtonsoft.Json.JsonProperty("EstATraiter", Required = Newtonsoft.Json.Required.Always)]
        public int EstATraiter { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateConversationsUtilisateurV2
    {
        [Newtonsoft.Json.JsonProperty("Archiver", Required = Newtonsoft.Json.Required.Always)]
        public bool Archiver { get; set; }

        [Newtonsoft.Json.JsonProperty("MettreALu", Required = Newtonsoft.Json.Required.Always)]
        public bool MettreALu { get; set; }

        [Newtonsoft.Json.JsonProperty("Filtres", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ConversationFiltre Filtres { get; set; } = new ConversationFiltre();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ConversationFiltre
    {
        [Newtonsoft.Json.JsonProperty("EstArchive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EstArchive { get; set; }

        [Newtonsoft.Json.JsonProperty("EstNonLu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EstNonLu { get; set; }

        [Newtonsoft.Json.JsonProperty("EstATraiter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EstATraiter { get; set; }

        [Newtonsoft.Json.JsonProperty("EstFavori", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EstFavori { get; set; }

        [Newtonsoft.Json.JsonProperty("EstRecuOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EstRecuOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("EstEnvoyeOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EstEnvoyeOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("Recherche", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Recherche { get; set; }

        [Newtonsoft.Json.JsonProperty("Types", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ConversationTypeEnum> Types { get; set; } = new System.Collections.ObjectModel.Collection<ConversationTypeEnum>();

        [Newtonsoft.Json.JsonProperty("IdTechPsCibles", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> IdTechPsCibles { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    /// <summary>
    /// Résultats paginés
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class IPagedResultsOfDocumentTravail
    {
        /// <summary>
        /// Nombre d'éléments paginés renvoyés
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }

        /// <summary>
        /// Index du premier élément renvoyé
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Always)]
        public int Offset { get; set; }

        /// <summary>
        /// Eléments paginés
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DocumentTravail> Results { get; set; } = new System.Collections.ObjectModel.Collection<DocumentTravail>();

        /// <summary>
        /// Nombre total d'éléments
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
        public int Total { get; set; }

    }

    /// <summary>
    /// Document de travail (ébauche de document à envoyer)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DocumentTravail : BaseOfDocumentTravailAndDocumentTravail
    {
        /// <summary>
        /// Informations relatives à l'auteur du document de travail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Auteur", Required = Newtonsoft.Json.Required.Always)]
        public InfoPS2 Auteur { get; set; }

        /// <summary>
        /// Commentaire
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Commentaire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commentaire { get; set; }

        /// <summary>
        /// Contenu HTML
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Contenu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contenu { get; set; }

        /// <summary>
        /// Informations relatives au créateur identifié du document de travail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Createur", Required = Newtonsoft.Json.Required.Always)]
        public InfoPS2 Createur { get; set; }

        /// <summary>
        /// Informations relatives au créateur connecté du document de travail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreateurConnecte", Required = Newtonsoft.Json.Required.Always)]
        public InfoPS2 CreateurConnecte { get; set; }

        /// <summary>
        /// Date renseignée
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; }

        /// <summary>
        /// Date de création
        /// <br/>(renseignée automatiquement lors de la création)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DateCreation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateCreation { get; set; }

        /// <summary>
        /// Date de dernière modification
        /// <br/>(renseignée automatiquement lors de chaque mise à jour)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DateModification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateModification { get; set; }

        /// <summary>
        /// Date du partage
        /// <br/>(renseignée automatiquement lors du partage)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DatePartage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DatePartage { get; set; }

        /// <summary>
        /// Informations relatives au dernier modificateur du document de travail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DernierModificateur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InfoPS2 DernierModificateur { get; set; }

        /// <summary>
        /// Liste des idenfiants techniques des destinataires
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Destinataires", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Destinataires { get; set; }

        /// <summary>
        /// Est partagé (cas d'un document lié à un dossier patient)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EstPartage", Required = Newtonsoft.Json.Required.Always)]
        public bool EstPartage { get; set; }

        /// <summary>
        /// Est partagé (cas d'un document lié à un dossier patient)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CopiePatient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CopiePatient { get; set; }

        /// <summary>
        /// Informations relatives à l'expéditeur du document de travail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Expediteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InfoPS2 Expediteur { get; set; }

        /// <summary>
        /// Identifiant du document de travail
        /// <br/>(renseigné automatiquement lors de la création)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public decimal Id { get; set; }

        /// <summary>
        /// Id de la conversation concernée par l'échange
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdConversation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdConversation { get; set; }

        /// <summary>
        /// Identifiant régional du dossier patient (IPPR)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdDossierPatient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdDossierPatient { get; set; }

        /// <summary>
        /// Id du lieux
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdEtablissement", Required = Newtonsoft.Json.Required.Always)]
        public decimal IdEtablissement { get; set; }

        /// <summary>
        /// Id du fichier de travail (cas d'un upload de fichier)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdFichierTravail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdFichierTravail { get; set; }

        /// <summary>
        /// Id local du document
        /// <br/>(renseigné automatiquement lors du partage)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdLocalDocument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdLocalDocument { get; set; }

        /// <summary>
        /// Id du modèle de document
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdModeleDocument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdModeleDocument { get; set; }

        /// <summary>
        /// Id pathologie
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdPathologie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdPathologie { get; set; }

        /// <summary>
        /// Id de la pièce à laquelle on répond
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdPiecePereReponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdPiecePereReponse { get; set; }

        /// <summary>
        /// Id type de pièce
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdTypePiece", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdTypePiece { get; set; }

        /// <summary>
        /// Sujet de la conversation concernée par l'échange
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Importance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Importance { get; set; }

        /// <summary>
        /// Indique s'il s'agit d'une note :
        /// <br/>si ce champ est à true, le contenu du message doit être
        /// <br/>renseigné dans le champ Commentaire
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsCommentaireOnly", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCommentaireOnly { get; set; }

        /// <summary>
        /// Booléen qui indique si le document est favori
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsDocumentFavori", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDocumentFavori { get; set; }

        /// <summary>
        /// Booléen qui indique si le document est de synthèse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsDocumentSynthese", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDocumentSynthese { get; set; }

        /// <summary>
        /// Est supprimé
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsSupprime", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSupprime { get; set; }

        /// <summary>
        /// Libellé
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Libelle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        /// <summary>
        /// Libellé du patient (prénom NOM)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LibelleDossierPatient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LibelleDossierPatient { get; set; }

        /// <summary>
        /// Nom du fichier de travail (cas d'un upload de fichier)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NomFichierTravail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomFichierTravail { get; set; }

        /// <summary>
        /// Statut
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Statut", Required = Newtonsoft.Json.Required.Always)]
        public StatutDocumentTravail Statut { get; set; }

        /// <summary>
        /// Sujet de la conversation concernée par l'échange
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SujetConversation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SujetConversation { get; set; }

    }

    /// <summary>
    /// Informations relative à un professionnel de santé
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class InfoPS2 : BaseOfInfoPSAndInfosBasePs
    {
        /// <summary>
        /// Identifiant Adeli
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Adeli", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Adeli { get; set; }

        /// <summary>
        /// Identifiant de carte CPS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdCarte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdCarte { get; set; }

        /// <summary>
        /// Identifiant technique de la profession
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdProfession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdProfession { get; set; }

        /// <summary>
        /// Identifiant technique de la spécialité
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdSpecialite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdSpecialite { get; set; }

        /// <summary>
        /// Identifiant technique du professionel de santé
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdTechnique", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IdTechnique { get; set; }

        /// <summary>
        /// Civilité
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Civilite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Civilite { get; set; }

        /// <summary>
        /// Nom de famille
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Nom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nom { get; set; }

        /// <summary>
        /// Libellé de la profession
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NomProfession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomProfession { get; set; }

        /// <summary>
        /// Libellé de la spécialité
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NomSpecialite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomSpecialite { get; set; }

        /// <summary>
        /// Prénom
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Prenom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prenom { get; set; }

        /// <summary>
        /// Code couleur (hexadécimal) correspondant à la spécialité
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Couleur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Couleur { get; set; }

        /// <summary>
        /// Adresse email
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Identifiant Rpps
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Rpps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rpps { get; set; }

    }

    /// <summary>
    /// Classe de base des objets du modèle
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class BaseOfInfoPSAndInfosBasePs
    {

    }

    /// <summary>
    /// Enumération des différents états possibles d'un document de travail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum StatutDocumentTravail
    {

        Brouillon = 0,

        PreparationEnvoi = 1,

        EnvoiEnCours = 2,

        EnvoiEchoue = 3,

    }

    /// <summary>
    /// Classe de base des objets du modèle
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class BaseOfDocumentTravailAndDocumentTravail
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DocumentTravail2
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public decimal Id { get; set; }

        [Newtonsoft.Json.JsonProperty("IdLocalDocument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdLocalDocument { get; set; }

        [Newtonsoft.Json.JsonProperty("IdDossierPatient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdDossierPatient { get; set; }

        [Newtonsoft.Json.JsonProperty("Ins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ins Ins { get; set; }

        [Newtonsoft.Json.JsonProperty("LibelleDossierPatient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LibelleDossierPatient { get; set; }

        [Newtonsoft.Json.JsonProperty("EstPartage", Required = Newtonsoft.Json.Required.Always)]
        public bool EstPartage { get; set; }

        [Newtonsoft.Json.JsonProperty("IdEtablissement", Required = Newtonsoft.Json.Required.Always)]
        public decimal IdEtablissement { get; set; }

        [Newtonsoft.Json.JsonProperty("Createur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InfosBasePs Createur { get; set; }

        [Newtonsoft.Json.JsonProperty("CreateurConnecte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InfosBasePs CreateurConnecte { get; set; }

        [Newtonsoft.Json.JsonProperty("Expediteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InfosBasePs Expediteur { get; set; }

        [Newtonsoft.Json.JsonProperty("DernierModificateur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InfosBasePs DernierModificateur { get; set; }

        [Newtonsoft.Json.JsonProperty("Auteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InfosBasePs Auteur { get; set; }

        [Newtonsoft.Json.JsonProperty("IdPathologie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdPathologie { get; set; }

        [Newtonsoft.Json.JsonProperty("Libelle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        [Newtonsoft.Json.JsonProperty("Date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; }

        [Newtonsoft.Json.JsonProperty("Commentaire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commentaire { get; set; }

        [Newtonsoft.Json.JsonProperty("IdConversation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdConversation { get; set; }

        [Newtonsoft.Json.JsonProperty("SujetConversation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SujetConversation { get; set; }

        [Newtonsoft.Json.JsonProperty("Importance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Importance { get; set; }

        [Newtonsoft.Json.JsonProperty("IsDocumentFavori", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDocumentFavori { get; set; }

        [Newtonsoft.Json.JsonProperty("IsDocumentSynthese", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDocumentSynthese { get; set; }

        [Newtonsoft.Json.JsonProperty("IdModeleDocument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdModeleDocument { get; set; }

        [Newtonsoft.Json.JsonProperty("Statut", Required = Newtonsoft.Json.Required.Always)]
        public StatutDocumentTravailEnum Statut { get; set; }

        [Newtonsoft.Json.JsonProperty("IsCommentaireOnly", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCommentaireOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("DateCreation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateCreation { get; set; }

        [Newtonsoft.Json.JsonProperty("DateModification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateModification { get; set; }

        [Newtonsoft.Json.JsonProperty("DatePartage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DatePartage { get; set; }

        [Newtonsoft.Json.JsonProperty("Destinataires", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Destinataires { get; set; }

        [Newtonsoft.Json.JsonProperty("DestinatairesMSS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DestinatairesMSS { get; set; }

        [Newtonsoft.Json.JsonProperty("CopiePatient", Required = Newtonsoft.Json.Required.Always)]
        public bool CopiePatient { get; set; }

        [Newtonsoft.Json.JsonProperty("IsSupprime", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSupprime { get; set; }

        [Newtonsoft.Json.JsonProperty("FichiersTravail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FichierTravail> FichiersTravail { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageId", Required = Newtonsoft.Json.Required.Always)]
        public int MessageId { get; set; }

        [Newtonsoft.Json.JsonProperty("IdTypeFormulaireHybrid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdTypeFormulaireHybrid { get; set; }

        [Newtonsoft.Json.JsonProperty("IdFicheHybrid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdFicheHybrid { get; set; }

        [Newtonsoft.Json.JsonProperty("IsFormulaire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFormulaire { get; set; }

        [Newtonsoft.Json.JsonProperty("IdAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdAction { get; set; }

        [Newtonsoft.Json.JsonProperty("TypeConversation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeConversation { get; set; }

        [Newtonsoft.Json.JsonProperty("IdTypePiece", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdTypePiece { get; set; }

        [Newtonsoft.Json.JsonProperty("Contenu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contenu { get; set; }

        [Newtonsoft.Json.JsonProperty("NomFichierTravail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomFichierTravail { get; set; }

        [Newtonsoft.Json.JsonProperty("PartageDMP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PartageDMP { get; set; }

        [Newtonsoft.Json.JsonProperty("PartageMSC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PartageMSC { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Ins
    {
        [Newtonsoft.Json.JsonProperty("Matricule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Matricule { get; set; }

        [Newtonsoft.Json.JsonProperty("OID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OID { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class InfosBasePs
    {
        [Newtonsoft.Json.JsonProperty("IdTechnique", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdTechnique { get; set; }

        [Newtonsoft.Json.JsonProperty("Civilite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Civilite { get; set; }

        [Newtonsoft.Json.JsonProperty("Nom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nom { get; set; }

        [Newtonsoft.Json.JsonProperty("Prenom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prenom { get; set; }

        [Newtonsoft.Json.JsonProperty("IdSpecialite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdSpecialite { get; set; }

        [Newtonsoft.Json.JsonProperty("IdProfession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdProfession { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum StatutDocumentTravailEnum
    {

        Brouillon = 0,

        PreparationEnvoi = 1,

        EnvoiEnCours = 2,

        EnvoiEchoue = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FichierTravail
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public decimal Id { get; set; }

        [Newtonsoft.Json.JsonProperty("ContenuFichierTravail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] ContenuFichierTravail { get; set; }

        [Newtonsoft.Json.JsonProperty("MimeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MimeType { get; set; }

        [Newtonsoft.Json.JsonProperty("IdDocumentTravail", Required = Newtonsoft.Json.Required.Always)]
        public decimal IdDocumentTravail { get; set; }

        [Newtonsoft.Json.JsonProperty("NomFichierTravail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomFichierTravail { get; set; }

        [Newtonsoft.Json.JsonProperty("IdLocalDocument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdLocalDocument { get; set; }

        [Newtonsoft.Json.JsonProperty("IdTypePiece", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdTypePiece { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MessageId { get; set; }

        [Newtonsoft.Json.JsonProperty("PartId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PartId { get; set; }

        [Newtonsoft.Json.JsonProperty("IdEts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdEts { get; set; }

        [Newtonsoft.Json.JsonProperty("Date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; }

    }

    /// <summary>
    /// Résultat de l'envoi d'un document de travail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DocumentTravailSendResult : BaseOfDocumentTravailSendResultAndDocumentTravailSendResult
    {
        /// <summary>
        /// Identifiant de l'échange créé
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdEchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdEchange { get; set; }

        /// <summary>
        /// Identifiant de la conversation créé ou rapprochée
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdConversation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdConversation { get; set; }

        /// <summary>
        /// Vrai si l'échange a été créé et envoyé correctement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

    }

    /// <summary>
    /// Classe de base des objets du modèle
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class BaseOfDocumentTravailSendResultAndDocumentTravailSendResult
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SendDemandeAvisRequest
    {
        [Newtonsoft.Json.JsonProperty("IdTechPsExpert", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IdTechPsExpert { get; set; }

        [Newtonsoft.Json.JsonProperty("IdTechPsIdentifie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdTechPsIdentifie { get; set; }

        [Newtonsoft.Json.JsonProperty("ModeEquipeRessource", Required = Newtonsoft.Json.Required.Always)]
        public bool ModeEquipeRessource { get; set; }

        [Newtonsoft.Json.JsonProperty("StatutDansAnnuaire", Required = Newtonsoft.Json.Required.Always)]
        public bool StatutDansAnnuaire { get; set; }

        [Newtonsoft.Json.JsonProperty("EchangeBullePrerequis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EchangeBullePrerequis { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ReponseInfos
    {
        [Newtonsoft.Json.JsonProperty("IdTechPsAuteur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdTechPsAuteur { get; set; }

        [Newtonsoft.Json.JsonProperty("IdLocalDoc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdLocalDoc { get; set; }

        [Newtonsoft.Json.JsonProperty("IdEts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdEts { get; set; }

        [Newtonsoft.Json.JsonProperty("IdPiece", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdPiece { get; set; }

        [Newtonsoft.Json.JsonProperty("LibelleDoc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LibelleDoc { get; set; }

        [Newtonsoft.Json.JsonProperty("DateDoc", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateDoc { get; set; }

        [Newtonsoft.Json.JsonProperty("Ippr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ippr { get; set; }

        [Newtonsoft.Json.JsonProperty("PatientLibelle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PatientLibelle { get; set; }

        [Newtonsoft.Json.JsonProperty("IdDocumentTravail", Required = Newtonsoft.Json.Required.Always)]
        public decimal IdDocumentTravail { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TypePiece
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public decimal Id { get; set; }

        [Newtonsoft.Json.JsonProperty("IdCategorie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdCategorie { get; set; }

        [Newtonsoft.Json.JsonProperty("Nom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nom { get; set; }

        [Newtonsoft.Json.JsonProperty("NomCourt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomCourt { get; set; }

        [Newtonsoft.Json.JsonProperty("IsUrgence", Required = Newtonsoft.Json.Required.Always)]
        public bool IsUrgence { get; set; }

        [Newtonsoft.Json.JsonProperty("IsSynthese", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSynthese { get; set; }

        [Newtonsoft.Json.JsonProperty("Commentaire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commentaire { get; set; }

        [Newtonsoft.Json.JsonProperty("NumOrdre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? NumOrdre { get; set; }

        [Newtonsoft.Json.JsonProperty("IdPere", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdPere { get; set; }

        [Newtonsoft.Json.JsonProperty("VisibleMenu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VisibleMenu { get; set; }

        [Newtonsoft.Json.JsonProperty("UrlAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlAction { get; set; }

        [Newtonsoft.Json.JsonProperty("IsSupprime", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSupprime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CPAM
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("CodeCPAM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeCPAM { get; set; }

        [Newtonsoft.Json.JsonProperty("LibelleCPAM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LibelleCPAM { get; set; }

        [Newtonsoft.Json.JsonProperty("RegionCPAM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegionCPAM { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CategorieTypePiece
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public decimal Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Libelle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TypeIntervention
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public decimal Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Libelle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        [Newtonsoft.Json.JsonProperty("Norme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Norme { get; set; }

        [Newtonsoft.Json.JsonProperty("IdCategorieIntervention", Required = Newtonsoft.Json.Required.Always)]
        public int IdCategorieIntervention { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CategorieIntervention
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Libelle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class StatutActeur
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Libelle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Planification
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Periodicite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Periodicite { get; set; }

        [Newtonsoft.Json.JsonProperty("Libelle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        [Newtonsoft.Json.JsonProperty("Ordre", Required = Newtonsoft.Json.Required.Always)]
        public int Ordre { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Pathologie
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public decimal Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Nom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nom { get; set; }

        [Newtonsoft.Json.JsonProperty("Commentaire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commentaire { get; set; }

        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ModaliteExercice
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("Libelle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        [Newtonsoft.Json.JsonProperty("DateCreation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateCreation { get; set; }

        [Newtonsoft.Json.JsonProperty("DateModification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateModification { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemeCodage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SystemeCodage { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CadreExercice
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("Libelle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemeCodage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SystemeCodage { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Profession
    {
        [Newtonsoft.Json.JsonProperty("EstMorale", Required = Newtonsoft.Json.Required.Always)]
        public bool EstMorale { get; set; }

        [Newtonsoft.Json.JsonProperty("IdProfession", Required = Newtonsoft.Json.Required.Always)]
        public decimal IdProfession { get; set; }

        [Newtonsoft.Json.JsonProperty("NomProfession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomProfession { get; set; }

        [Newtonsoft.Json.JsonProperty("CodeXDS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeXDS { get; set; }

        [Newtonsoft.Json.JsonProperty("Ordre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ordre { get; set; }

        [Newtonsoft.Json.JsonProperty("ProNiveauHabilitation", Required = Newtonsoft.Json.Required.Always)]
        public int ProNiveauHabilitation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Specialite
    {
        [Newtonsoft.Json.JsonProperty("IdSpecialite", Required = Newtonsoft.Json.Required.Always)]
        public decimal IdSpecialite { get; set; }

        [Newtonsoft.Json.JsonProperty("IdGroupeSpecialite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdGroupeSpecialite { get; set; }

        [Newtonsoft.Json.JsonProperty("IdProfession", Required = Newtonsoft.Json.Required.Always)]
        public decimal IdProfession { get; set; }

        [Newtonsoft.Json.JsonProperty("CodeSpecialite", Required = Newtonsoft.Json.Required.Always)]
        public decimal CodeSpecialite { get; set; }

        [Newtonsoft.Json.JsonProperty("Couleur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Couleur { get; set; }

        [Newtonsoft.Json.JsonProperty("NomSpecialite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomSpecialite { get; set; }

        [Newtonsoft.Json.JsonProperty("CodeXDS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeXDS { get; set; }

        [Newtonsoft.Json.JsonProperty("Ordre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ordre { get; set; }

        [Newtonsoft.Json.JsonProperty("EstPremierRecours", Required = Newtonsoft.Json.Required.Always)]
        public bool EstPremierRecours { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Etiquette
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Libelle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        [Newtonsoft.Json.JsonProperty("DateCreation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateCreation { get; set; }

        [Newtonsoft.Json.JsonProperty("DateModification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateModification { get; set; }

        [Newtonsoft.Json.JsonProperty("LoginUtilisateur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoginUtilisateur { get; set; }

        [Newtonsoft.Json.JsonProperty("NbPatientConcerne", Required = Newtonsoft.Json.Required.Always)]
        public int NbPatientConcerne { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CoordonneesGPS
    {
        [Newtonsoft.Json.JsonProperty("IdTechPs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdTechPs { get; set; }

        [Newtonsoft.Json.JsonProperty("Latitude", Required = Newtonsoft.Json.Required.Always)]
        public double Latitude { get; set; }

        [Newtonsoft.Json.JsonProperty("Longitude", Required = Newtonsoft.Json.Required.Always)]
        public double Longitude { get; set; }

    }

    /// <summary>
    /// Model object for GetCoordonneesGPSByIdTechPs method
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class GetCoordonneesGPSByIdTechPsRequest
    {
        /// <summary>
        /// List of techPs ids
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdsTechPs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IdsTechPs { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ActionUtilisateur
    {
        [Newtonsoft.Json.JsonProperty("CodeTypeEvenement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeTypeEvenement { get; set; }

        [Newtonsoft.Json.JsonProperty("DateEvenement", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateEvenement { get; set; }

        [Newtonsoft.Json.JsonProperty("Ippr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ippr { get; set; }

        [Newtonsoft.Json.JsonProperty("PatientNomPrenom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PatientNomPrenom { get; set; }

        [Newtonsoft.Json.JsonProperty("IdPiece", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdPiece { get; set; }

        [Newtonsoft.Json.JsonProperty("Commentaire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commentaire { get; set; }

        [Newtonsoft.Json.JsonProperty("IdTechPSConnecte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdTechPSConnecte { get; set; }

        [Newtonsoft.Json.JsonProperty("IdTechPSIdentifie", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdTechPSIdentifie { get; set; }

        [Newtonsoft.Json.JsonProperty("NomUtilisateur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomUtilisateur { get; set; }

        [Newtonsoft.Json.JsonProperty("IdProvenance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdProvenance { get; set; }

        [Newtonsoft.Json.JsonProperty("TypeProvenance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeProvenance { get; set; }

        [Newtonsoft.Json.JsonProperty("IdIntervention", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdIntervention { get; set; }

        [Newtonsoft.Json.JsonProperty("IdActeurConcerne", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdActeurConcerne { get; set; }

        [Newtonsoft.Json.JsonProperty("IdTechPSCible", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdTechPSCible { get; set; }

        [Newtonsoft.Json.JsonProperty("Idformulaire", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Idformulaire { get; set; }

        [Newtonsoft.Json.JsonProperty("IdEchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdEchange { get; set; }

        [Newtonsoft.Json.JsonProperty("IdEvenementPlanning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdEvenementPlanning { get; set; }

        [Newtonsoft.Json.JsonProperty("IdProgramme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdProgramme { get; set; }

        [Newtonsoft.Json.JsonProperty("TypeProgramme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeProgramme { get; set; }

        [Newtonsoft.Json.JsonProperty("SecurityToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecurityToken { get; set; }

        [Newtonsoft.Json.JsonProperty("IdAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdAction { get; set; }

        [Newtonsoft.Json.JsonProperty("DestinatairesIdGipCps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinatairesIdGipCps { get; set; }

    }

    /// <summary>
    /// Description d'un utilisateur/acteur réduit
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UtilisateurActeurLight
    {
        /// <summary>
        /// Identifiant technique de l'utilisateur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdTechPS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdTechPS { get; set; }

        /// <summary>
        /// Civilité de l'utilisateur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Civilite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Civilite { get; set; }

        /// <summary>
        /// Nom de naissance de l'utilisateur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NomNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomNaissance { get; set; }

        /// <summary>
        /// Nom d'usage de l'utilisateur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NomUsuel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomUsuel { get; set; }

        /// <summary>
        /// Prénom de l'utilisateur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Prenom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prenom { get; set; }

        /// <summary>
        /// Code postal de résidence de l'utilisateur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CodePostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodePostal { get; set; }

        /// <summary>
        /// Ville de résidence de l'utilisateur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Ville", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ville { get; set; }

        /// <summary>
        /// Nom de la spécialité de l'utilisateur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NomSpecialite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomSpecialite { get; set; }

        /// <summary>
        /// Nom des établissements de l'utilisateur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NomsEtablissements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> NomsEtablissements { get; set; }

        /// <summary>
        /// Identifiant régional du patient
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Ippr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ippr { get; set; }

        /// <summary>
        /// L'utilisateur est-il acteur du dossier patient d'Ippr
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isActeurDossier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsActeurDossier { get; set; }

        /// <summary>
        /// L'utilisateur est-il acteur du dossier patient d'Ippr
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HabilitationDossierPatient", Required = Newtonsoft.Json.Required.Always)]
        public HabilitationDossierPatient HabilitationDossierPatient { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum HabilitationDossierPatient
    {

        HabiliteComplet = 0,

        HabiliteLimite = 1,

        HabiliteSynthese = 2,

        NonHabilitable = 3,

        Desactivee = 4,

        Proscrit = 5,

        NonHabilite = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SearchRequestModel
    {
        [Newtonsoft.Json.JsonProperty("nomsPrenom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomsPrenom { get; set; }

        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.Always)]
        public int MaxResults { get; set; }

        [Newtonsoft.Json.JsonProperty("idsTechAexclure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IdsTechAexclure { get; set; }

    }

    /// <summary>
    /// Description d'un utilisateur enrichi
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UtilisateurExtended
    {
        /// <summary>
        /// IdTechPS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdTechPS", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IdTechPS { get; set; }

        /// <summary>
        /// Rpps
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Rpps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rpps { get; set; }

        /// <summary>
        /// Adeli
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Adeli", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Adeli { get; set; }

        /// <summary>
        /// Civilite
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Civilite", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Civilite { get; set; }

        /// <summary>
        /// NomNaissance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NomNaissance", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string NomNaissance { get; set; }

        /// <summary>
        /// NomUsuel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NomUsuel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string NomUsuel { get; set; }

        /// <summary>
        /// Prenom
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Prenom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Prenom { get; set; }

        /// <summary>
        /// CodePostal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CodePostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodePostal { get; set; }

        /// <summary>
        /// Ville
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Ville", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ville { get; set; }

        /// <summary>
        /// Si le PS est une personne morale
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EstMorale", Required = Newtonsoft.Json.Required.Always)]
        public bool EstMorale { get; set; }

        /// <summary>
        /// Adresse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Adresse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Adresse { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// TelephoneMobile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TelephoneMobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelephoneMobile { get; set; }

        /// <summary>
        /// TelephoneFixe
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TelephoneFixe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelephoneFixe { get; set; }

        /// <summary>
        /// TelephoneSecretariat
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TelephoneSecretariat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelephoneSecretariat { get; set; }

        /// <summary>
        /// Specialite
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IdSpecialite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? IdSpecialite { get; set; }

        /// <summary>
        /// Specialite
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SpecialiteNom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpecialiteNom { get; set; }

        /// <summary>
        /// Liste Etablissements
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Etablissements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EtablissementLight> Etablissements { get; set; }

        /// <summary>
        /// ZeroPapier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ZeroPapier", Required = Newtonsoft.Json.Required.Always)]
        public bool ZeroPapier { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class EtablissementLight
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public decimal Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Nom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nom { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Utilisateur
    {
        [Newtonsoft.Json.JsonProperty("IdTechPs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IdTechPs { get; set; }

        [Newtonsoft.Json.JsonProperty("IdCarte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdCarte { get; set; }

        [Newtonsoft.Json.JsonProperty("Rpps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rpps { get; set; }

        [Newtonsoft.Json.JsonProperty("Adeli", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Adeli { get; set; }

        [Newtonsoft.Json.JsonProperty("Civilite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Civilite { get; set; }

        [Newtonsoft.Json.JsonProperty("NomNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("NomUsuel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string NomUsuel { get; set; }

        [Newtonsoft.Json.JsonProperty("Prenom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Prenom { get; set; }

        [Newtonsoft.Json.JsonProperty("CodePostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodePostal { get; set; }

        [Newtonsoft.Json.JsonProperty("Ville", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ville { get; set; }

        [Newtonsoft.Json.JsonProperty("Adresse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Adresse { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("TelephoneMobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelephoneMobile { get; set; }

        [Newtonsoft.Json.JsonProperty("GestionnaireHabilitation", Required = Newtonsoft.Json.Required.Always)]
        public bool GestionnaireHabilitation { get; set; }

        [Newtonsoft.Json.JsonProperty("AccesBrisGlace", Required = Newtonsoft.Json.Required.Always)]
        public bool AccesBrisGlace { get; set; }

        [Newtonsoft.Json.JsonProperty("Specialite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Specialite Specialite { get; set; }

        [Newtonsoft.Json.JsonProperty("Profession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Profession Profession { get; set; }

        [Newtonsoft.Json.JsonProperty("Etablissements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Etablissement> Etablissements { get; set; }

        [Newtonsoft.Json.JsonProperty("EstAdministrateur", Required = Newtonsoft.Json.Required.Always)]
        public bool EstAdministrateur { get; set; }

        [Newtonsoft.Json.JsonProperty("EstGestionnaireEquipe", Required = Newtonsoft.Json.Required.Always)]
        public bool EstGestionnaireEquipe { get; set; }

        [Newtonsoft.Json.JsonProperty("EnvoiMailInactif", Required = Newtonsoft.Json.Required.Always)]
        public bool EnvoiMailInactif { get; set; }

        [Newtonsoft.Json.JsonProperty("AdministrateurFonctionnelAlias", Required = Newtonsoft.Json.Required.Always)]
        public bool AdministrateurFonctionnelAlias { get; set; }

        [Newtonsoft.Json.JsonProperty("AdministrateurTechniqueAlias", Required = Newtonsoft.Json.Required.Always)]
        public bool AdministrateurTechniqueAlias { get; set; }

        [Newtonsoft.Json.JsonProperty("TypeEcranDossier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeEcranDossier { get; set; }

        [Newtonsoft.Json.JsonProperty("ZeroPapier", Required = Newtonsoft.Json.Required.Always)]
        public bool ZeroPapier { get; set; }

        [Newtonsoft.Json.JsonProperty("Actif", Required = Newtonsoft.Json.Required.Always)]
        public bool Actif { get; set; }

        [Newtonsoft.Json.JsonProperty("DateCreation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateCreation { get; set; }

        [Newtonsoft.Json.JsonProperty("DateModification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateModification { get; set; }

        [Newtonsoft.Json.JsonProperty("EstMorale", Required = Newtonsoft.Json.Required.Always)]
        public bool EstMorale { get; set; }

        [Newtonsoft.Json.JsonProperty("TypeUtilisateur", Required = Newtonsoft.Json.Required.Always)]
        public TypeUtilisateur TypeUtilisateur { get; set; }

        [Newtonsoft.Json.JsonProperty("EstHotliner", Required = Newtonsoft.Json.Required.Always)]
        public bool EstHotliner { get; set; }

        [Newtonsoft.Json.JsonProperty("TelephoneFixe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelephoneFixe { get; set; }

        [Newtonsoft.Json.JsonProperty("TelephoneSecretariat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelephoneSecretariat { get; set; }

        [Newtonsoft.Json.JsonProperty("PartageAdressePostale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PartageAdressePostale { get; set; }

        [Newtonsoft.Json.JsonProperty("PartageAdresseEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PartageAdresseEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("PartageTelephoneFixe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PartageTelephoneFixe { get; set; }

        [Newtonsoft.Json.JsonProperty("PartageTelephoneMobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PartageTelephoneMobile { get; set; }

        [Newtonsoft.Json.JsonProperty("PartageTelephoneSecretariat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PartageTelephoneSecretariat { get; set; }

        [Newtonsoft.Json.JsonProperty("HasAdressePostale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasAdressePostale { get; set; }

        [Newtonsoft.Json.JsonProperty("HasEmail", Required = Newtonsoft.Json.Required.Always)]
        public bool HasEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("HasTelephoneFixe", Required = Newtonsoft.Json.Required.Always)]
        public bool HasTelephoneFixe { get; set; }

        [Newtonsoft.Json.JsonProperty("HasTelephoneMobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasTelephoneMobile { get; set; }

        [Newtonsoft.Json.JsonProperty("HasTelephoneSecretariat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasTelephoneSecretariat { get; set; }

        [Newtonsoft.Json.JsonProperty("MailMss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MailMss { get; set; }

        [Newtonsoft.Json.JsonProperty("EstGestionnairePreference", Required = Newtonsoft.Json.Required.Always)]
        public bool EstGestionnairePreference { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum TypeUtilisateur
    {

        PS = 0,

        US = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UtilisateurVisionneuse
    {
        [Newtonsoft.Json.JsonProperty("IdTechPs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IdTechPs { get; set; }

        [Newtonsoft.Json.JsonProperty("IdCarte", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdCarte { get; set; }

        [Newtonsoft.Json.JsonProperty("Rpps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rpps { get; set; }

        [Newtonsoft.Json.JsonProperty("Adeli", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Adeli { get; set; }

        [Newtonsoft.Json.JsonProperty("Civilite", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Civilite { get; set; }

        [Newtonsoft.Json.JsonProperty("NomUsuel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string NomUsuel { get; set; }

        [Newtonsoft.Json.JsonProperty("Prenom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Prenom { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class PatientFileActive
    {
        [Newtonsoft.Json.JsonProperty("Ippr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ippr { get; set; }

        [Newtonsoft.Json.JsonProperty("NomNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("NomUsuel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomUsuel { get; set; }

        [Newtonsoft.Json.JsonProperty("Prenom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prenom { get; set; }

        [Newtonsoft.Json.JsonProperty("PrenomUsuel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrenomUsuel { get; set; }

        [Newtonsoft.Json.JsonProperty("CodeSexe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeSexe { get; set; }

        [Newtonsoft.Json.JsonProperty("CommentairePatient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommentairePatient { get; set; }

        [Newtonsoft.Json.JsonProperty("DateNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("IdActeurPatient", Required = Newtonsoft.Json.Required.Always)]
        public decimal IdActeurPatient { get; set; }

        [Newtonsoft.Json.JsonProperty("IdSpecialiteActeur", Required = Newtonsoft.Json.Required.Always)]
        public int IdSpecialiteActeur { get; set; }

        [Newtonsoft.Json.JsonProperty("IdStatutActeur", Required = Newtonsoft.Json.Required.Always)]
        public int IdStatutActeur { get; set; }

        [Newtonsoft.Json.JsonProperty("DateDernierSuivi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateDernierSuivi { get; set; }

        [Newtonsoft.Json.JsonProperty("DelaiRecurrenceJour", Required = Newtonsoft.Json.Required.Always)]
        public int DelaiRecurrenceJour { get; set; }

        [Newtonsoft.Json.JsonProperty("DateCreation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateCreation { get; set; }

        [Newtonsoft.Json.JsonProperty("DateDerniereActivite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateDerniereActivite { get; set; }

        [Newtonsoft.Json.JsonProperty("Supprime", Required = Newtonsoft.Json.Required.Always)]
        public bool Supprime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class HabilitationsActusPatient : HabilitationDossierComplete
    {
        [Newtonsoft.Json.JsonProperty("HabilitationsByCodeActus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HabilitationActualitePatient> HabilitationsByCodeActus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class HabilitationActualitePatient
    {
        [Newtonsoft.Json.JsonProperty("CodeActualite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeActualite { get; set; }

        [Newtonsoft.Json.JsonProperty("DateLimite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateLimite { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class HabilitationDossierComplete
    {
        [Newtonsoft.Json.JsonProperty("StatutHabiliteDossier", Required = Newtonsoft.Json.Required.Always)]
        public HabiliteDossierEnum StatutHabiliteDossier { get; set; }

        [Newtonsoft.Json.JsonProperty("StatutHabiliteDossierV2", Required = Newtonsoft.Json.Required.Always)]
        public HabilitationDossierPatient StatutHabiliteDossierV2 { get; set; }

        [Newtonsoft.Json.JsonProperty("DateDebutHabilitation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateDebutHabilitation { get; set; }

        [Newtonsoft.Json.JsonProperty("DateFinHabilitation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateFinHabilitation { get; set; }

        [Newtonsoft.Json.JsonProperty("IsGestionnaireHabilitations", Required = Newtonsoft.Json.Required.Always)]
        public bool IsGestionnaireHabilitations { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum HabiliteDossierEnum
    {

        Non = 0,

        Oui = 1,

        Proscrit = 2,

        NonApplicable = 3,

        OuiViaPasseDroit = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ProvideAndRegisterDocumentSetRequestType
    {
        [Newtonsoft.Json.JsonProperty("SubmitObjectsRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubmitObjectsRequest SubmitObjectsRequest { get; set; }

        [Newtonsoft.Json.JsonProperty("Document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProvideAndRegisterDocumentSetRequestTypeDocument> Document { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SubmitObjectsRequest : RegistryRequestType
    {
        [Newtonsoft.Json.JsonProperty("RegistryObjectList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentifiableType> RegistryObjectList { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class IdentifiableType
    {
        [Newtonsoft.Json.JsonProperty("Slot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SlotType1> Slot { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Home { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SlotType1
    {
        [Newtonsoft.Json.JsonProperty("ValueList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueListType ValueList { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("slotType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SlotType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ValueListType
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class RegistryRequestType
    {
        [Newtonsoft.Json.JsonProperty("RequestSlotList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SlotType1> RequestSlotList { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ProvideAndRegisterDocumentSetRequestTypeDocument
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040ClinicalDocument
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public II Id { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE Code { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ST Title { get; set; }

        [Newtonsoft.Json.JsonProperty("effectiveTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TS EffectiveTime { get; set; }

        [Newtonsoft.Json.JsonProperty("confidentialityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE ConfidentialityCode { get; set; }

        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CS LanguageCode { get; set; }

        [Newtonsoft.Json.JsonProperty("setId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public II SetId { get; set; }

        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public INT VersionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("copyTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TS CopyTime { get; set; }

        [Newtonsoft.Json.JsonProperty("recordTarget", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<POCD_MT000040RecordTarget> RecordTarget { get; set; }

        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<POCD_MT000040Author> Author { get; set; }

        [Newtonsoft.Json.JsonProperty("dataEnterer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040DataEnterer DataEnterer { get; set; }

        [Newtonsoft.Json.JsonProperty("informant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<POCD_MT000040Informant12> Informant { get; set; }

        [Newtonsoft.Json.JsonProperty("custodian", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Custodian Custodian { get; set; }

        [Newtonsoft.Json.JsonProperty("informationRecipient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<POCD_MT000040InformationRecipient> InformationRecipient { get; set; }

        [Newtonsoft.Json.JsonProperty("legalAuthenticator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040LegalAuthenticator LegalAuthenticator { get; set; }

        [Newtonsoft.Json.JsonProperty("authenticator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<POCD_MT000040Authenticator> Authenticator { get; set; }

        [Newtonsoft.Json.JsonProperty("participant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<POCD_MT000040Participant1> Participant { get; set; }

        [Newtonsoft.Json.JsonProperty("inFulfillmentOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<POCD_MT000040InFulfillmentOf> InFulfillmentOf { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<POCD_MT000040DocumentationOf> DocumentationOf { get; set; }

        [Newtonsoft.Json.JsonProperty("relatedDocument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<POCD_MT000040RelatedDocument> RelatedDocument { get; set; }

        [Newtonsoft.Json.JsonProperty("authorization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<POCD_MT000040Authorization> Authorization { get; set; }

        [Newtonsoft.Json.JsonProperty("componentOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Component1 ComponentOf { get; set; }

        [Newtonsoft.Json.JsonProperty("component", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Component2 Component { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Always)]
        public ActClinicalDocument ClassCode { get; set; }

        [Newtonsoft.Json.JsonProperty("classCodeSpecified", Required = Newtonsoft.Json.Required.Always)]
        public bool ClassCodeSpecified { get; set; }

        [Newtonsoft.Json.JsonProperty("moodCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MoodCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CS : CV
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CV : CE
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CE : CD
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CD : ANY
    {
        [Newtonsoft.Json.JsonProperty("originalText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ED OriginalText { get; set; }

        [Newtonsoft.Json.JsonProperty("qualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CR> Qualifier { get; set; }

        [Newtonsoft.Json.JsonProperty("translation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CD> Translation { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("codeSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeSystem { get; set; }

        [Newtonsoft.Json.JsonProperty("codeSystemName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeSystemName { get; set; }

        [Newtonsoft.Json.JsonProperty("codeSystemVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeSystemVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ED : BIN
    {
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TEL Reference { get; set; }

        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Thumbnail Thumbnail { get; set; }

        [Newtonsoft.Json.JsonProperty("mediaType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediaType { get; set; } = "text/plain";

        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        [Newtonsoft.Json.JsonProperty("compression", Required = Newtonsoft.Json.Required.Always)]
        public CompressionAlgorithm Compression { get; set; }

        [Newtonsoft.Json.JsonProperty("compressionSpecified", Required = Newtonsoft.Json.Required.Always)]
        public bool CompressionSpecified { get; set; }

        [Newtonsoft.Json.JsonProperty("integrityCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] IntegrityCheck { get; set; }

        [Newtonsoft.Json.JsonProperty("integrityCheckAlgorithm", Required = Newtonsoft.Json.Required.Always)]
        public IntegrityCheckAlgorithm IntegrityCheckAlgorithm { get; set; } = IntegrityCheckAlgorithm.SHA1;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TEL : URL
    {
        [Newtonsoft.Json.JsonProperty("useablePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SXCM_TS> UseablePeriod { get; set; }

        [Newtonsoft.Json.JsonProperty("use", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Use { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SXCM_TS : TS
    {
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        public SetOperator Operator { get; set; } = SetOperator.I;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum SetOperator
    {

        A = 0,

        E = 1,

        H = 2,

        I = 3,

        P = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TS : QTY
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class QTY : ANY
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class ANY
    {
        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class URL : ANY
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Thumbnail : ED
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum CompressionAlgorithm
    {

        DF = 0,

        GZ = 1,

        Z = 2,

        ZL = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum IntegrityCheckAlgorithm
    {

        SHA1 = 0,

        SHA256 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class BIN : ANY
    {
        [Newtonsoft.Json.JsonProperty("representation", Required = Newtonsoft.Json.Required.Always)]
        public BinaryDataEncoding Representation { get; set; } = BinaryDataEncoding.TXT;

        [Newtonsoft.Json.JsonProperty("Text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Text { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum BinaryDataEncoding
    {

        B64 = 0,

        TXT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CR : ANY
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CV Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CD Value { get; set; }

        [Newtonsoft.Json.JsonProperty("inverted", Required = Newtonsoft.Json.Required.Always)]
        public bool Inverted { get; set; } = false;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040InfrastructureRoottypeId : II
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class II : ANY
    {
        [Newtonsoft.Json.JsonProperty("root", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Root { get; set; }

        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; set; }

        [Newtonsoft.Json.JsonProperty("assigningAuthorityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssigningAuthorityName { get; set; }

        [Newtonsoft.Json.JsonProperty("displayable", Required = Newtonsoft.Json.Required.Always)]
        public bool Displayable { get; set; }

        [Newtonsoft.Json.JsonProperty("displayableSpecified", Required = Newtonsoft.Json.Required.Always)]
        public bool DisplayableSpecified { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ST : ED
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class INT : QTY
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040RecordTarget
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("patientRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040PatientRole PatientRole { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("contextControlCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContextControlCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040PatientRole
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> Id { get; set; }

        [Newtonsoft.Json.JsonProperty("addr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AD> Addr { get; set; }

        [Newtonsoft.Json.JsonProperty("telecom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TEL> Telecom { get; set; }

        [Newtonsoft.Json.JsonProperty("patient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Patient Patient { get; set; }

        [Newtonsoft.Json.JsonProperty("providerOrganization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Organization ProviderOrganization { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class AD : ANY
    {
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ADXP> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("useablePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SXCM_TS> UseablePeriod { get; set; }

        [Newtonsoft.Json.JsonProperty("Text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Text { get; set; }

        [Newtonsoft.Json.JsonProperty("use", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Use { get; set; }

        [Newtonsoft.Json.JsonProperty("isNotOrdered", Required = Newtonsoft.Json.Required.Always)]
        public bool IsNotOrdered { get; set; }

        [Newtonsoft.Json.JsonProperty("isNotOrderedSpecified", Required = Newtonsoft.Json.Required.Always)]
        public bool IsNotOrderedSpecified { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ADXP : ST
    {
        [Newtonsoft.Json.JsonProperty("partType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Patient
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public II Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PN> Name { get; set; }

        [Newtonsoft.Json.JsonProperty("administrativeGenderCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE AdministrativeGenderCode { get; set; }

        [Newtonsoft.Json.JsonProperty("birthTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TS BirthTime { get; set; }

        [Newtonsoft.Json.JsonProperty("maritalStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE MaritalStatusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("religiousAffiliationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE ReligiousAffiliationCode { get; set; }

        [Newtonsoft.Json.JsonProperty("raceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE RaceCode { get; set; }

        [Newtonsoft.Json.JsonProperty("ethnicGroupCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE EthnicGroupCode { get; set; }

        [Newtonsoft.Json.JsonProperty("guardian", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<POCD_MT000040Guardian> Guardian { get; set; }

        [Newtonsoft.Json.JsonProperty("birthplace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Birthplace Birthplace { get; set; }

        [Newtonsoft.Json.JsonProperty("languageCommunication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<POCD_MT000040LanguageCommunication> LanguageCommunication { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassCode { get; set; }

        [Newtonsoft.Json.JsonProperty("determinerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeterminerCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class PN : EN
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class EN : ANY
    {
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ENXP> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("validTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IVL_TS ValidTime { get; set; }

        [Newtonsoft.Json.JsonProperty("Text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Text { get; set; }

        [Newtonsoft.Json.JsonProperty("use", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Use { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ENXP : ST
    {
        [Newtonsoft.Json.JsonProperty("partType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartType { get; set; }

        [Newtonsoft.Json.JsonProperty("qualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Qualifier { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class IVL_TS : SXCM_TS
    {
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QTY> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("ItemsElementName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ItemsChoiceType2> ItemsElementName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum ItemsChoiceType2
    {

        Center = 0,

        High = 1,

        Low = 2,

        Width = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Guardian
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> Id { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE Code { get; set; }

        [Newtonsoft.Json.JsonProperty("addr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AD> Addr { get; set; }

        [Newtonsoft.Json.JsonProperty("telecom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TEL> Telecom { get; set; }

        [Newtonsoft.Json.JsonProperty("Item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Item { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Birthplace
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("place", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Place Place { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Place
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EN Name { get; set; }

        [Newtonsoft.Json.JsonProperty("addr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AD Addr { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Always)]
        public EntityClassPlace ClassCode { get; set; }

        [Newtonsoft.Json.JsonProperty("classCodeSpecified", Required = Newtonsoft.Json.Required.Always)]
        public bool ClassCodeSpecified { get; set; }

        [Newtonsoft.Json.JsonProperty("determinerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeterminerCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum EntityClassPlace
    {

        PLC = 0,

        CITY = 1,

        COUNTRY = 2,

        COUNTY = 3,

        PROVINCE = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040LanguageCommunication
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CS LanguageCode { get; set; }

        [Newtonsoft.Json.JsonProperty("modeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE ModeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("proficiencyLevelCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE ProficiencyLevelCode { get; set; }

        [Newtonsoft.Json.JsonProperty("preferenceInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BL PreferenceInd { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class BL : ANY
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public bool Value { get; set; }

        [Newtonsoft.Json.JsonProperty("valueSpecified", Required = Newtonsoft.Json.Required.Always)]
        public bool ValueSpecified { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Organization
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ON> Name { get; set; }

        [Newtonsoft.Json.JsonProperty("telecom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TEL> Telecom { get; set; }

        [Newtonsoft.Json.JsonProperty("addr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AD> Addr { get; set; }

        [Newtonsoft.Json.JsonProperty("standardIndustryClassCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE StandardIndustryClassCode { get; set; }

        [Newtonsoft.Json.JsonProperty("asOrganizationPartOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040OrganizationPartOf AsOrganizationPartOf { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassCode { get; set; }

        [Newtonsoft.Json.JsonProperty("determinerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeterminerCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ON : EN
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040OrganizationPartOf
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> Id { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE Code { get; set; }

        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CS StatusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("effectiveTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IVL_TS EffectiveTime { get; set; }

        [Newtonsoft.Json.JsonProperty("wholeOrganization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Organization WholeOrganization { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Author
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("functionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE FunctionCode { get; set; }

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TS Time { get; set; }

        [Newtonsoft.Json.JsonProperty("assignedAuthor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040AssignedAuthor AssignedAuthor { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("contextControlCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContextControlCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040AssignedAuthor
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> Id { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE Code { get; set; }

        [Newtonsoft.Json.JsonProperty("addr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AD> Addr { get; set; }

        [Newtonsoft.Json.JsonProperty("telecom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TEL> Telecom { get; set; }

        [Newtonsoft.Json.JsonProperty("Item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Item { get; set; }

        [Newtonsoft.Json.JsonProperty("representedOrganization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Organization RepresentedOrganization { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040DataEnterer
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TS Time { get; set; }

        [Newtonsoft.Json.JsonProperty("assignedEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040AssignedEntity AssignedEntity { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("contextControlCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContextControlCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040AssignedEntity
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> Id { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE Code { get; set; }

        [Newtonsoft.Json.JsonProperty("addr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AD> Addr { get; set; }

        [Newtonsoft.Json.JsonProperty("telecom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TEL> Telecom { get; set; }

        [Newtonsoft.Json.JsonProperty("assignedPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Person AssignedPerson { get; set; }

        [Newtonsoft.Json.JsonProperty("representedOrganization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Organization RepresentedOrganization { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Person
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PN> Name { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassCode { get; set; }

        [Newtonsoft.Json.JsonProperty("determinerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeterminerCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Informant12
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("Item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Item { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("contextControlCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContextControlCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Custodian
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("assignedCustodian", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040AssignedCustodian AssignedCustodian { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040AssignedCustodian
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("representedCustodianOrganization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040CustodianOrganization RepresentedCustodianOrganization { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040CustodianOrganization
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ON Name { get; set; }

        [Newtonsoft.Json.JsonProperty("telecom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TEL Telecom { get; set; }

        [Newtonsoft.Json.JsonProperty("addr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AD Addr { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassCode { get; set; }

        [Newtonsoft.Json.JsonProperty("determinerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeterminerCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040InformationRecipient
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("intendedRecipient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040IntendedRecipient IntendedRecipient { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
        public X_InformationRecipient TypeCode { get; set; } = X_InformationRecipient.PRCP;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040IntendedRecipient
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> Id { get; set; }

        [Newtonsoft.Json.JsonProperty("addr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AD> Addr { get; set; }

        [Newtonsoft.Json.JsonProperty("telecom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TEL> Telecom { get; set; }

        [Newtonsoft.Json.JsonProperty("informationRecipient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Person InformationRecipient { get; set; }

        [Newtonsoft.Json.JsonProperty("receivedOrganization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Organization ReceivedOrganization { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Always)]
        public X_InformationRecipientRole ClassCode { get; set; } = X_InformationRecipientRole.ASSIGNED;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum X_InformationRecipientRole
    {

        ASSIGNED = 0,

        HLTHCHRT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum X_InformationRecipient
    {

        PRCP = 0,

        TRC = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040LegalAuthenticator
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TS Time { get; set; }

        [Newtonsoft.Json.JsonProperty("signatureCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CS SignatureCode { get; set; }

        [Newtonsoft.Json.JsonProperty("assignedEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040AssignedEntity AssignedEntity { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("contextControlCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContextControlCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Authenticator
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TS Time { get; set; }

        [Newtonsoft.Json.JsonProperty("signatureCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CS SignatureCode { get; set; }

        [Newtonsoft.Json.JsonProperty("assignedEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040AssignedEntity AssignedEntity { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Participant1
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("functionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE FunctionCode { get; set; }

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IVL_TS Time { get; set; }

        [Newtonsoft.Json.JsonProperty("associatedEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040AssociatedEntity AssociatedEntity { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("contextControlCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContextControlCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040AssociatedEntity
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> Id { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE Code { get; set; }

        [Newtonsoft.Json.JsonProperty("addr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AD> Addr { get; set; }

        [Newtonsoft.Json.JsonProperty("telecom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TEL> Telecom { get; set; }

        [Newtonsoft.Json.JsonProperty("associatedPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Person AssociatedPerson { get; set; }

        [Newtonsoft.Json.JsonProperty("scopingOrganization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Organization ScopingOrganization { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040InFulfillmentOf
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Order Order { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
        public ActRelationshipFulfills TypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCodeSpecified", Required = Newtonsoft.Json.Required.Always)]
        public bool TypeCodeSpecified { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Order
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> Id { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE Code { get; set; }

        [Newtonsoft.Json.JsonProperty("priorityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE PriorityCode { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassCode { get; set; } = "ACT";

        [Newtonsoft.Json.JsonProperty("moodCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MoodCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum ActRelationshipFulfills
    {

        FLFS = 0,

        OCCR = 1,

        OREF = 2,

        SCH = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040DocumentationOf
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040ServiceEvent ServiceEvent { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040ServiceEvent
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> Id { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE Code { get; set; }

        [Newtonsoft.Json.JsonProperty("effectiveTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IVL_TS EffectiveTime { get; set; }

        [Newtonsoft.Json.JsonProperty("performer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<POCD_MT000040Performer1> Performer { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassCode { get; set; } = "ACT";

        [Newtonsoft.Json.JsonProperty("moodCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MoodCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Performer1
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("functionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE FunctionCode { get; set; }

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IVL_TS Time { get; set; }

        [Newtonsoft.Json.JsonProperty("assignedEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040AssignedEntity AssignedEntity { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
        public X_ServiceEventPerformer TypeCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum X_ServiceEventPerformer
    {

        PRF = 0,

        PPRF = 1,

        SPRF = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040RelatedDocument
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("parentDocument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040ParentDocument ParentDocument { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
        public X_ActRelationshipDocument TypeCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040ParentDocument
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> Id { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CD Code { get; set; }

        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ED Text { get; set; }

        [Newtonsoft.Json.JsonProperty("setId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public II SetId { get; set; }

        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public INT VersionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Always)]
        public ActClinicalDocument ClassCode { get; set; }

        [Newtonsoft.Json.JsonProperty("classCodeSpecified", Required = Newtonsoft.Json.Required.Always)]
        public bool ClassCodeSpecified { get; set; }

        [Newtonsoft.Json.JsonProperty("moodCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MoodCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum ActClinicalDocument
    {

        DOCCLIN = 0,

        CDALVLONE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum X_ActRelationshipDocument
    {

        RPLC = 0,

        APND = 1,

        XFRM = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Authorization
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("consent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Consent Consent { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Consent
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> Id { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE Code { get; set; }

        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CS StatusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassCode { get; set; }

        [Newtonsoft.Json.JsonProperty("moodCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MoodCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Component1
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("encompassingEncounter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040EncompassingEncounter EncompassingEncounter { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
        public ActRelationshipHasComponent TypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCodeSpecified", Required = Newtonsoft.Json.Required.Always)]
        public bool TypeCodeSpecified { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040EncompassingEncounter
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> Id { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE Code { get; set; }

        [Newtonsoft.Json.JsonProperty("effectiveTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IVL_TS EffectiveTime { get; set; }

        [Newtonsoft.Json.JsonProperty("dischargeDispositionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE DischargeDispositionCode { get; set; }

        [Newtonsoft.Json.JsonProperty("responsibleParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040ResponsibleParty ResponsibleParty { get; set; }

        [Newtonsoft.Json.JsonProperty("encounterParticipant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<POCD_MT000040EncounterParticipant> EncounterParticipant { get; set; }

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Location Location { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassCode { get; set; }

        [Newtonsoft.Json.JsonProperty("moodCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MoodCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040ResponsibleParty
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("assignedEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040AssignedEntity AssignedEntity { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040EncounterParticipant
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IVL_TS Time { get; set; }

        [Newtonsoft.Json.JsonProperty("assignedEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040AssignedEntity AssignedEntity { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
        public X_EncounterParticipant TypeCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum X_EncounterParticipant
    {

        ADM = 0,

        ATND = 1,

        CON = 2,

        DIS = 3,

        REF = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Location
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("healthCareFacility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040HealthCareFacility HealthCareFacility { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
        public ParticipationTargetLocation TypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCodeSpecified", Required = Newtonsoft.Json.Required.Always)]
        public bool TypeCodeSpecified { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040HealthCareFacility
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> Id { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CE Code { get; set; }

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Place Location { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceProviderOrganization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040Organization ServiceProviderOrganization { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("classCode", Required = Newtonsoft.Json.Required.Always)]
        public RoleClassServiceDeliveryLocation ClassCode { get; set; } = RoleClassServiceDeliveryLocation.SDLOC;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum RoleClassServiceDeliveryLocation
    {

        SDLOC = 0,

        DSDLOC = 1,

        ISDLOC = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum ParticipationTargetLocation
    {

        LOC = 0,

        DST = 1,

        ELOC = 2,

        ORG = 3,

        RML = 4,

        VIA = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum ActRelationshipHasComponent
    {

        COMP = 0,

        ARR = 1,

        CTRLV = 2,

        DEP = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class POCD_MT000040Component2
    {
        [Newtonsoft.Json.JsonProperty("realmCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CS> RealmCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public POCD_MT000040InfrastructureRoottypeId TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<II> TemplateId { get; set; }

        [Newtonsoft.Json.JsonProperty("Item", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Item { get; set; }

        [Newtonsoft.Json.JsonProperty("nullFlavor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NullFlavor { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
        public ActRelationshipHasComponent TypeCode { get; set; }

        [Newtonsoft.Json.JsonProperty("typeCodeSpecified", Required = Newtonsoft.Json.Required.Always)]
        public bool TypeCodeSpecified { get; set; }

        [Newtonsoft.Json.JsonProperty("contextConductionInd", Required = Newtonsoft.Json.Required.Always)]
        public bool ContextConductionInd { get; set; }

        [Newtonsoft.Json.JsonProperty("contextConductionIndSpecified", Required = Newtonsoft.Json.Required.Always)]
        public bool ContextConductionIndSpecified { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FichierNomme
    {
        [Newtonsoft.Json.JsonProperty("Contenu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Contenu { get; set; }

        [Newtonsoft.Json.JsonProperty("Nom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nom { get; set; }

        [Newtonsoft.Json.JsonProperty("TypeMime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeMime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum TypeSectionExportPDF
    {

        CVDS = 0,

        DS = 1,

        DSOC = 2,

        PINV = 3,

        CONCB = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DocumentTravailSendResult2
    {
        [Newtonsoft.Json.JsonProperty("IdEchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdEchange { get; set; }

        [Newtonsoft.Json.JsonProperty("IdConversation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdConversation { get; set; }

        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

    }

    /// <summary>
    /// Fichier de travail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SendExportSynthesePDFRequest
    {
        /// <summary>
        /// Liste destinataires
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idTechPsDestinataires", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IdTechPsDestinataires { get; set; }

        /// <summary>
        /// listeSections
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listeSections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TypeSectionExportPDF> ListeSections { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class VisioParticipant : BaseOfVisioParticipantAndVisioParticipant
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DateModification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateModification { get; set; }

        [Newtonsoft.Json.JsonProperty("Login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; set; }

        [Newtonsoft.Json.JsonProperty("IdVisio", Required = Newtonsoft.Json.Required.Always)]
        public int IdVisio { get; set; }

        [Newtonsoft.Json.JsonProperty("DateCreation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateCreation { get; set; }

    }

    /// <summary>
    /// Classe de base des objets du modèle
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class BaseOfVisioParticipantAndVisioParticipant
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ValueSet : DomainResource
    {
        [Newtonsoft.Json.JsonProperty("UrlElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirUri UrlElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Identifier> Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("VersionElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString VersionElement { get; set; }

        [Newtonsoft.Json.JsonProperty("NameElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString NameElement { get; set; }

        [Newtonsoft.Json.JsonProperty("TitleElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString TitleElement { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeOfPublicationStatus StatusElement { get; set; }

        [Newtonsoft.Json.JsonProperty("ExperimentalElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirBoolean ExperimentalElement { get; set; }

        [Newtonsoft.Json.JsonProperty("DateElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirDateTime DateElement { get; set; }

        [Newtonsoft.Json.JsonProperty("PublisherElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString PublisherElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContactDetail> Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Markdown Description { get; set; }

        [Newtonsoft.Json.JsonProperty("UseContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UsageContext> UseContext { get; set; }

        [Newtonsoft.Json.JsonProperty("Jurisdiction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CodeableConcept> Jurisdiction { get; set; }

        [Newtonsoft.Json.JsonProperty("ImmutableElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirBoolean ImmutableElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Purpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Markdown Purpose { get; set; }

        [Newtonsoft.Json.JsonProperty("Copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Markdown Copyright { get; set; }

        [Newtonsoft.Json.JsonProperty("ExtensibleElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirBoolean ExtensibleElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Compose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComposeComponent Compose { get; set; }

        [Newtonsoft.Json.JsonProperty("Expansion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExpansionComponent Expansion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FhirUri : PrimitiveOfString
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfString : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class Primitive : Element
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class Element : Base
    {
        [Newtonsoft.Json.JsonProperty("ElementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElementId { get; set; }

        [Newtonsoft.Json.JsonProperty("Extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Extension> Extension { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Extension : Element
    {
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Element Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class Base
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Identifier : Element
    {
        [Newtonsoft.Json.JsonProperty("UseElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeOfIdentifierUse UseElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeableConcept Type { get; set; }

        [Newtonsoft.Json.JsonProperty("SystemElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirUri SystemElement { get; set; }

        [Newtonsoft.Json.JsonProperty("ValueElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString ValueElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Period Period { get; set; }

        [Newtonsoft.Json.JsonProperty("Assigner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResourceReference Assigner { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CodeOfIdentifierUse : PrimitiveOfIdentifierUse
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentifierUse? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum IdentifierUse
    {

        Usual = 0,

        Official = 1,

        Temp = 2,

        Secondary = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfIdentifierUse : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CodeableConcept : Element
    {
        [Newtonsoft.Json.JsonProperty("Coding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Coding> Coding { get; set; }

        [Newtonsoft.Json.JsonProperty("TextElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString TextElement { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Coding : Element
    {
        [Newtonsoft.Json.JsonProperty("SystemElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirUri SystemElement { get; set; }

        [Newtonsoft.Json.JsonProperty("VersionElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString VersionElement { get; set; }

        [Newtonsoft.Json.JsonProperty("CodeElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Code CodeElement { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString DisplayElement { get; set; }

        [Newtonsoft.Json.JsonProperty("UserSelectedElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirBoolean UserSelectedElement { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FhirString : PrimitiveOfString
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Code : PrimitiveOfString
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FhirBoolean : PrimitiveOfNullableBoolean
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfNullableBoolean : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Period : Element
    {
        [Newtonsoft.Json.JsonProperty("StartElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirDateTime StartElement { get; set; }

        [Newtonsoft.Json.JsonProperty("EndElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirDateTime EndElement { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FhirDateTime : PrimitiveOfString
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ResourceReference : Element
    {
        [Newtonsoft.Json.JsonProperty("ReferenceElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString ReferenceElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifier Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString DisplayElement { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CodeOfPublicationStatus : PrimitiveOfPublicationStatus
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PublicationStatus? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum PublicationStatus
    {

        Draft = 0,

        Active = 1,

        Retired = 2,

        Unknown = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfPublicationStatus : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ContactDetail : Element
    {
        [Newtonsoft.Json.JsonProperty("NameElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString NameElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Telecom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContactPoint> Telecom { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ContactPoint : Element
    {
        [Newtonsoft.Json.JsonProperty("SystemElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeOfContactPointSystem SystemElement { get; set; }

        [Newtonsoft.Json.JsonProperty("ValueElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString ValueElement { get; set; }

        [Newtonsoft.Json.JsonProperty("UseElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeOfContactPointUse UseElement { get; set; }

        [Newtonsoft.Json.JsonProperty("RankElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PositiveInt RankElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Period Period { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CodeOfContactPointSystem : PrimitiveOfContactPointSystem
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactPointSystem? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum ContactPointSystem
    {

        Phone = 0,

        Fax = 1,

        Email = 2,

        Pager = 3,

        Url = 4,

        Sms = 5,

        Other = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfContactPointSystem : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CodeOfContactPointUse : PrimitiveOfContactPointUse
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactPointUse? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum ContactPointUse
    {

        Home = 0,

        Work = 1,

        Temp = 2,

        Old = 3,

        Mobile = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfContactPointUse : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class PositiveInt : PrimitiveOfNullableInteger
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfNullableInteger : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Markdown : PrimitiveOfString
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UsageContext : Element
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coding Code { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Element Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ComposeComponent : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("LockedDateElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Date LockedDateElement { get; set; }

        [Newtonsoft.Json.JsonProperty("InactiveElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirBoolean InactiveElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Include", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConceptSetComponent> Include { get; set; }

        [Newtonsoft.Json.JsonProperty("Exclude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConceptSetComponent> Exclude { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Date : PrimitiveOfString
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ConceptSetComponent : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("SystemElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirUri SystemElement { get; set; }

        [Newtonsoft.Json.JsonProperty("VersionElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString VersionElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Concept", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConceptReferenceComponent> Concept { get; set; }

        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterComponent> Filter { get; set; }

        [Newtonsoft.Json.JsonProperty("ValueSetElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FhirUri> ValueSetElement { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ConceptReferenceComponent : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("CodeElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Code CodeElement { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString DisplayElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Designation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DesignationComponent> Designation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DesignationComponent : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("LanguageElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Code LanguageElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Use", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coding Use { get; set; }

        [Newtonsoft.Json.JsonProperty("ValueElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString ValueElement { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class BackboneElement : Element
    {
        [Newtonsoft.Json.JsonProperty("ModifierExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Extension> ModifierExtension { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FilterComponent : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("PropertyElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Code PropertyElement { get; set; }

        [Newtonsoft.Json.JsonProperty("OpElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeOfFilterOperator OpElement { get; set; }

        [Newtonsoft.Json.JsonProperty("ValueElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Code ValueElement { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CodeOfFilterOperator : PrimitiveOfFilterOperator
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterOperator? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum FilterOperator
    {

        Equal = 0,

        IsA = 1,

        DescendentOf = 2,

        IsNotA = 3,

        Regex = 4,

        In = 5,

        NotIn = 6,

        Generalizes = 7,

        Exists = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfFilterOperator : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ExpansionComponent : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("IdentifierElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirUri IdentifierElement { get; set; }

        [Newtonsoft.Json.JsonProperty("TimestampElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirDateTime TimestampElement { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Integer TotalElement { get; set; }

        [Newtonsoft.Json.JsonProperty("OffsetElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Integer OffsetElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Parameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ParameterComponent> Parameter { get; set; }

        [Newtonsoft.Json.JsonProperty("Contains", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContainsComponent> Contains { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Integer : PrimitiveOfNullableInteger
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ParameterComponent : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("NameElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString NameElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Element Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ContainsComponent : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("SystemElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirUri SystemElement { get; set; }

        [Newtonsoft.Json.JsonProperty("AbstractElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirBoolean AbstractElement { get; set; }

        [Newtonsoft.Json.JsonProperty("InactiveElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirBoolean InactiveElement { get; set; }

        [Newtonsoft.Json.JsonProperty("VersionElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString VersionElement { get; set; }

        [Newtonsoft.Json.JsonProperty("CodeElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Code CodeElement { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString DisplayElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Designation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DesignationComponent> Designation { get; set; }

        [Newtonsoft.Json.JsonProperty("Contains", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContainsComponent> Contains { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class DomainResource : Resource
    {
        [Newtonsoft.Json.JsonProperty("Text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Narrative Text { get; set; }

        [Newtonsoft.Json.JsonProperty("Contained", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Resource> Contained { get; set; }

        [Newtonsoft.Json.JsonProperty("Extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Extension> Extension { get; set; }

        [Newtonsoft.Json.JsonProperty("ModifierExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Extension> ModifierExtension { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Narrative : Element
    {
        [Newtonsoft.Json.JsonProperty("StatusElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeOfNarrativeStatus StatusElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Div", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Div { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CodeOfNarrativeStatus : PrimitiveOfNarrativeStatus
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NarrativeStatus? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum NarrativeStatus
    {

        Generated = 0,

        Extensions = 1,

        Additional = 2,

        Empty = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfNarrativeStatus : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class Resource : Base
    {
        [Newtonsoft.Json.JsonProperty("IdElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Id IdElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }

        [Newtonsoft.Json.JsonProperty("ImplicitRulesElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirUri ImplicitRulesElement { get; set; }

        [Newtonsoft.Json.JsonProperty("LanguageElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Code LanguageElement { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Id : PrimitiveOfString
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Meta : Element
    {
        [Newtonsoft.Json.JsonProperty("VersionIdElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Id VersionIdElement { get; set; }

        [Newtonsoft.Json.JsonProperty("LastUpdatedElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Instant LastUpdatedElement { get; set; }

        [Newtonsoft.Json.JsonProperty("ProfileElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FhirUri> ProfileElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Security", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Coding> Security { get; set; }

        [Newtonsoft.Json.JsonProperty("Tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Coding> Tag { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Instant : PrimitiveOfNullableDateTimeOffset
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfNullableDateTimeOffset : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SticPatientRecord
    {
        [Newtonsoft.Json.JsonProperty("Ippr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ippr { get; set; }

        [Newtonsoft.Json.JsonProperty("NomNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("NomUsuel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NomUsuel { get; set; }

        [Newtonsoft.Json.JsonProperty("Prenom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prenom { get; set; }

        [Newtonsoft.Json.JsonProperty("PrenomUsuel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrenomUsuel { get; set; }

        [Newtonsoft.Json.JsonProperty("DateNaissance", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("Sexe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sexe { get; set; }

        [Newtonsoft.Json.JsonProperty("CodePaysNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodePaysNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("CodePostalNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodePostalNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("VilleNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VilleNaissance { get; set; }

        [Newtonsoft.Json.JsonProperty("CodePostalResidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodePostalResidence { get; set; }

        [Newtonsoft.Json.JsonProperty("VilleResidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VilleResidence { get; set; }

        [Newtonsoft.Json.JsonProperty("CodePaysResidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodePaysResidence { get; set; }

        [Newtonsoft.Json.JsonProperty("AdresseResidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdresseResidence { get; set; }

        [Newtonsoft.Json.JsonProperty("TelephoneResidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelephoneResidence { get; set; }

        [Newtonsoft.Json.JsonProperty("TelephonePortable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelephonePortable { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("ListePrenoms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListePrenoms { get; set; }

        [Newtonsoft.Json.JsonProperty("LieuNaissanceCog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LieuNaissanceCog { get; set; }

        [Newtonsoft.Json.JsonProperty("Statut", Required = Newtonsoft.Json.Required.Always)]
        public StatutIdentiteIns Statut { get; set; }

        [Newtonsoft.Json.JsonProperty("Ins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentifiantNational Ins { get; set; }

        [Newtonsoft.Json.JsonProperty("Attribut", Required = Newtonsoft.Json.Required.Always)]
        public AttributIns Attribut { get; set; }

        [Newtonsoft.Json.JsonProperty("DateDerniereVerificationINS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateDerniereVerificationINS { get; set; }

        [Newtonsoft.Json.JsonProperty("PsQualif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PsQualif { get; set; }

        [Newtonsoft.Json.JsonProperty("DateDernierAppelINS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateDernierAppelINS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class IdentifiantNational
    {
        [Newtonsoft.Json.JsonProperty("Nir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nir { get; set; }

        [Newtonsoft.Json.JsonProperty("EstNia", Required = Newtonsoft.Json.Required.Always)]
        public bool EstNia { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum AttributIns
    {

        None = 0,

        Homonyme = 1,

        Fictive = 2,

        Anonyme = 3,

        Douteux = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Bundle : Resource
    {
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifier Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("TypeElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeOfBundleType TypeElement { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnsignedInt TotalElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LinkComponent> Link { get; set; }

        [Newtonsoft.Json.JsonProperty("Entry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EntryComponent> Entry { get; set; }

        [Newtonsoft.Json.JsonProperty("Signature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Signature Signature { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CodeOfBundleType : PrimitiveOfBundleType
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BundleType? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum BundleType
    {

        Document = 0,

        Message = 1,

        Transaction = 2,

        TransactionResponse = 3,

        Batch = 4,

        BatchResponse = 5,

        History = 6,

        Searchset = 7,

        Collection = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfBundleType : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UnsignedInt : PrimitiveOfNullableInteger
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class LinkComponent : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("RelationElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString RelationElement { get; set; }

        [Newtonsoft.Json.JsonProperty("UrlElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirUri UrlElement { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class EntryComponent : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("Link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LinkComponent> Link { get; set; }

        [Newtonsoft.Json.JsonProperty("FullUrlElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirUri FullUrlElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Resource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Resource Resource { get; set; }

        [Newtonsoft.Json.JsonProperty("Search", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchComponent Search { get; set; }

        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestComponent Request { get; set; }

        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResponseComponent Response { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SearchComponent : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("ModeElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeOfSearchEntryMode ModeElement { get; set; }

        [Newtonsoft.Json.JsonProperty("ScoreElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirDecimal ScoreElement { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CodeOfSearchEntryMode : PrimitiveOfSearchEntryMode
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchEntryMode? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum SearchEntryMode
    {

        Match = 0,

        Include = 1,

        Outcome = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfSearchEntryMode : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FhirDecimal : PrimitiveOfNullableDecimal
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfNullableDecimal : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class RequestComponent : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("MethodElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeOfHTTPVerb MethodElement { get; set; }

        [Newtonsoft.Json.JsonProperty("UrlElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirUri UrlElement { get; set; }

        [Newtonsoft.Json.JsonProperty("IfNoneMatchElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString IfNoneMatchElement { get; set; }

        [Newtonsoft.Json.JsonProperty("IfModifiedSinceElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Instant IfModifiedSinceElement { get; set; }

        [Newtonsoft.Json.JsonProperty("IfMatchElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString IfMatchElement { get; set; }

        [Newtonsoft.Json.JsonProperty("IfNoneExistElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString IfNoneExistElement { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CodeOfHTTPVerb : PrimitiveOfHTTPVerb
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HTTPVerb? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum HTTPVerb
    {

        GET = 0,

        POST = 1,

        PUT = 2,

        DELETE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfHTTPVerb : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ResponseComponent : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("StatusElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString StatusElement { get; set; }

        [Newtonsoft.Json.JsonProperty("LocationElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirUri LocationElement { get; set; }

        [Newtonsoft.Json.JsonProperty("EtagElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString EtagElement { get; set; }

        [Newtonsoft.Json.JsonProperty("LastModifiedElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Instant LastModifiedElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Outcome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Resource Outcome { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Signature : Element
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Coding> Type { get; set; }

        [Newtonsoft.Json.JsonProperty("WhenElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Instant WhenElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Who", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Element Who { get; set; }

        [Newtonsoft.Json.JsonProperty("OnBehalfOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Element OnBehalfOf { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentTypeElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Code ContentTypeElement { get; set; }

        [Newtonsoft.Json.JsonProperty("BlobElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Base64Binary BlobElement { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Base64Binary : PrimitiveOfByteOf
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfByteOf : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Patient2 : DomainResource
    {
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Identifier> Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("ActiveElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirBoolean ActiveElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HumanName> Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Telecom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContactPoint> Telecom { get; set; }

        [Newtonsoft.Json.JsonProperty("GenderElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeOfAdministrativeGender GenderElement { get; set; }

        [Newtonsoft.Json.JsonProperty("BirthDateElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Date BirthDateElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Deceased", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Element Deceased { get; set; }

        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Address> Address { get; set; }

        [Newtonsoft.Json.JsonProperty("MaritalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeableConcept MaritalStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("MultipleBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Element MultipleBirth { get; set; }

        [Newtonsoft.Json.JsonProperty("Photo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> Photo { get; set; }

        [Newtonsoft.Json.JsonProperty("Contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContactComponent> Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("Animal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnimalComponent Animal { get; set; }

        [Newtonsoft.Json.JsonProperty("Communication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CommunicationComponent> Communication { get; set; }

        [Newtonsoft.Json.JsonProperty("GeneralPractitioner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ResourceReference> GeneralPractitioner { get; set; }

        [Newtonsoft.Json.JsonProperty("ManagingOrganization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResourceReference ManagingOrganization { get; set; }

        [Newtonsoft.Json.JsonProperty("Link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LinkComponent2> Link { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class HumanName : Element
    {
        [Newtonsoft.Json.JsonProperty("UseElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeOfNameUse UseElement { get; set; }

        [Newtonsoft.Json.JsonProperty("TextElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString TextElement { get; set; }

        [Newtonsoft.Json.JsonProperty("FamilyElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString FamilyElement { get; set; }

        [Newtonsoft.Json.JsonProperty("GivenElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FhirString> GivenElement { get; set; }

        [Newtonsoft.Json.JsonProperty("PrefixElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FhirString> PrefixElement { get; set; }

        [Newtonsoft.Json.JsonProperty("SuffixElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FhirString> SuffixElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Period Period { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CodeOfNameUse : PrimitiveOfNameUse
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NameUse? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum NameUse
    {

        Usual = 0,

        Official = 1,

        Temp = 2,

        Nickname = 3,

        Anonymous = 4,

        Old = 5,

        Maiden = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfNameUse : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CodeOfAdministrativeGender : PrimitiveOfAdministrativeGender
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdministrativeGender? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum AdministrativeGender
    {

        Male = 0,

        Female = 1,

        Other = 2,

        Unknown = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfAdministrativeGender : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Address : Element
    {
        [Newtonsoft.Json.JsonProperty("UseElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeOfAddressUse UseElement { get; set; }

        [Newtonsoft.Json.JsonProperty("TypeElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeOfAddressType TypeElement { get; set; }

        [Newtonsoft.Json.JsonProperty("TextElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString TextElement { get; set; }

        [Newtonsoft.Json.JsonProperty("LineElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FhirString> LineElement { get; set; }

        [Newtonsoft.Json.JsonProperty("CityElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString CityElement { get; set; }

        [Newtonsoft.Json.JsonProperty("DistrictElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString DistrictElement { get; set; }

        [Newtonsoft.Json.JsonProperty("StateElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString StateElement { get; set; }

        [Newtonsoft.Json.JsonProperty("PostalCodeElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString PostalCodeElement { get; set; }

        [Newtonsoft.Json.JsonProperty("CountryElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString CountryElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Period Period { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CodeOfAddressUse : PrimitiveOfAddressUse
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressUse? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum AddressUse
    {

        Home = 0,

        Work = 1,

        Temp = 2,

        Old = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfAddressUse : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CodeOfAddressType : PrimitiveOfAddressType
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AddressType? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum AddressType
    {

        Postal = 0,

        Physical = 1,

        Both = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfAddressType : Primitive
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Attachment : Element
    {
        [Newtonsoft.Json.JsonProperty("ContentTypeElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Code ContentTypeElement { get; set; }

        [Newtonsoft.Json.JsonProperty("LanguageElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Code LanguageElement { get; set; }

        [Newtonsoft.Json.JsonProperty("DataElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Base64Binary DataElement { get; set; }

        [Newtonsoft.Json.JsonProperty("UrlElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirUri UrlElement { get; set; }

        [Newtonsoft.Json.JsonProperty("SizeElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnsignedInt SizeElement { get; set; }

        [Newtonsoft.Json.JsonProperty("HashElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Base64Binary HashElement { get; set; }

        [Newtonsoft.Json.JsonProperty("TitleElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirString TitleElement { get; set; }

        [Newtonsoft.Json.JsonProperty("CreationElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirDateTime CreationElement { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ContactComponent : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("Relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CodeableConcept> Relationship { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HumanName Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Telecom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContactPoint> Telecom { get; set; }

        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        [Newtonsoft.Json.JsonProperty("GenderElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeOfAdministrativeGender GenderElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResourceReference Organization { get; set; }

        [Newtonsoft.Json.JsonProperty("Period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Period Period { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class AnimalComponent : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("Species", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeableConcept Species { get; set; }

        [Newtonsoft.Json.JsonProperty("Breed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeableConcept Breed { get; set; }

        [Newtonsoft.Json.JsonProperty("GenderStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeableConcept GenderStatus { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CommunicationComponent : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("Language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeableConcept Language { get; set; }

        [Newtonsoft.Json.JsonProperty("PreferredElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirBoolean PreferredElement { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class LinkComponent2 : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("Other", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResourceReference Other { get; set; }

        [Newtonsoft.Json.JsonProperty("TypeElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeOfLinkType TypeElement { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CodeOfLinkType : PrimitiveOfLinkType
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LinkType? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum LinkType
    {

        ReplacedBy = 0,

        Replaces = 1,

        Refer = 2,

        Seealso = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class PrimitiveOfLinkType : Primitive
    {

    }

    /// <summary>
    /// Codes de retour de l'appel InscriptionPatientDefinitif du connecteur ViaPatient
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum MyHopCreationCompteMscCodeRetour
    {

        None = 0,

        Doublon = 1,

        PatientDejaInscrit = 2,

        PatientInscritCompteExistant = 3,

        PatientInscritCompteCree = 4,

        PatientInscritSansCompte = 5,

        PatientIntrouvableDpi = 9,

        TraitStrictManquant = 10,

        TelephoneNeCorrespondPas = 12,

        MotDePasseNeCorrespondPas = 13,

    }

    /// <summary>
    /// La classe PatientUtilisateur est une classe composite dont l’objectif est de faciliter les appels aux services.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class MyHopPatientUtilisateur
    {
        [Newtonsoft.Json.JsonProperty("Patient", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MyHopPatient Patient { get; set; }

        [Newtonsoft.Json.JsonProperty("Utilisateur", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MyHopUtilisateur Utilisateur { get; set; }

        /// <summary>
        /// Relation entre le patient et l'utilisateur 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LienPatientUtilisateur", Required = Newtonsoft.Json.Required.Always)]
        public MyHopLienPatientUtilisateurEnum LienPatientUtilisateur { get; set; }

    }

    /// <summary>
    /// La classe Patient assure l’unicité des données par son identifiant. Un patient peut avoir une même identité pour plusieurs site
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class MyHopPatient : BaseOfMyHopPatientAndPatient
    {
        /// <summary>
        /// Code postal de naissance du patient, obligatoire si Pays de naissance = France
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CodePostalDeNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodePostalDeNaissance { get; set; }

        /// <summary>
        /// Date de naissance du patient
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DateDeNaissance", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset DateDeNaissance { get; set; }

        /// <summary>
        /// Adresse e-mail du patient
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Email { get; set; }

        /// <summary>
        /// Identifiant régional du patient
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IPPR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IPPR { get; set; }

        [Newtonsoft.Json.JsonProperty("IdRegion", Required = Newtonsoft.Json.Required.Always)]
        public int IdRegion { get; set; }

        /// <summary>
        /// Nom usuel du patient
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Nom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Nom { get; set; }

        /// <summary>
        /// Nom de naissance du patient
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NomDeNaissance", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string NomDeNaissance { get; set; }

        /// <summary>
        /// Libellé du pays de naissance du patient
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PaysDeNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaysDeNaissance { get; set; }

        /// <summary>
        /// Prénom du patient
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Prenom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Prenom { get; set; }

        /// <summary>
        /// Sexe du patient
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Sexe", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Sexe { get; set; }

        /// <summary>
        /// Numéro de téléphone mobile du patient
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TelephoneMobile", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TelephoneMobile { get; set; }

        /// <summary>
        /// Ville de naissance du patient
        /// </summary>
        [Newtonsoft.Json.JsonProperty("VilleDeNaissance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VilleDeNaissance { get; set; }

    }

    /// <summary>
    /// Classe de base des objets du modèle
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class BaseOfMyHopPatientAndPatient
    {

    }

    /// <summary>
    /// La classe Utilisateur permet de gérer le compte utilisateur. 
    /// <br/>Un utilisateur est identifié par son adresse mail (champ Email). 
    /// <br/>Les patients sont libres de créer des comptes sur le site viaPatient, mais le rattachement se fait uniquement si le patient possède un Email valide ou un numéro de téléphone portable (champs Email et TelephoneMobile). 
    /// <br/>L’OTP permet d’assurer l’identification croisée entre l’utilisateur et le patient.
    /// <br/>L’Email de l’utilisateur est l’identifiant utilisé lors de la connexion dans viaPatient.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class MyHopUtilisateur : BaseOfMyHopUtilisateurAndUtilisateurViaPatient
    {
        /// <summary>
        /// Email de l'utilisateur : identifiant utilisé par l'utilisateur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Email { get; set; }

        /// <summary>
        /// Nom de l'utilsateur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Nom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Nom { get; set; }

        /// <summary>
        /// Prénom de l'utilsateur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Prenom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Prenom { get; set; }

        /// <summary>
        /// Numéro de téléphone mobile de l'utilsateur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Mobile", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Mobile { get; set; }

    }

    /// <summary>
    /// Classe de base des objets du modèle
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public abstract partial class BaseOfMyHopUtilisateurAndUtilisateurViaPatient
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum MyHopLienPatientUtilisateurEnum
    {

        PersonneConcernee = 1,

        Pere = 2,

        Mere = 3,

        ResponsableLegal = 4,

        PersonneDeConfiance = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class InfoDateInclusion
    {
        [Newtonsoft.Json.JsonProperty("IdActeur", Required = Newtonsoft.Json.Required.Always)]
        public int IdActeur { get; set; }

        [Newtonsoft.Json.JsonProperty("IdTechPs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdTechPs { get; set; }

        [Newtonsoft.Json.JsonProperty("LastDateInclusion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastDateInclusion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateTraitsEtenduRequest
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("Valeur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Valeur { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Practitioner : DomainResource
    {
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Identifier> Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("ActiveElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FhirBoolean ActiveElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HumanName> Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Telecom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContactPoint> Telecom { get; set; }

        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Address> Address { get; set; }

        [Newtonsoft.Json.JsonProperty("GenderElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeOfAdministrativeGender GenderElement { get; set; }

        [Newtonsoft.Json.JsonProperty("BirthDateElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Date BirthDateElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Photo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachment> Photo { get; set; }

        [Newtonsoft.Json.JsonProperty("Qualification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QualificationComponent> Qualification { get; set; }

        [Newtonsoft.Json.JsonProperty("Communication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CodeableConcept> Communication { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class QualificationComponent : BackboneElement
    {
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Identifier> Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CodeableConcept Code { get; set; }

        [Newtonsoft.Json.JsonProperty("Period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Period Period { get; set; }

        [Newtonsoft.Json.JsonProperty("Issuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResourceReference Issuer { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603